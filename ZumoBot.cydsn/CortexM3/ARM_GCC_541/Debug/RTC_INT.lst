ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"RTC_INT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RTC_ISR,"ax",%progbits
  20              		.align	2
  21              		.global	RTC_ISR
  22              		.thumb
  23              		.thumb_func
  24              		.type	RTC_ISR, %function
  25              	RTC_ISR:
  26              	.LFB7:
  27              		.file 1 "Generated_Source\\PSoC5\\RTC_INT.c"
   1:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/RTC_INT.c **** * File Name: RTC_INT.c
   3:Generated_Source\PSoC5/RTC_INT.c **** * Version 2.0
   4:Generated_Source\PSoC5/RTC_INT.c **** *
   5:Generated_Source\PSoC5/RTC_INT.c **** * Description:
   6:Generated_Source\PSoC5/RTC_INT.c **** *  This file contains the Interrupt Service Routine (ISR) for the RTC component.
   7:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt routine has entry pointes to overflow on time or date.
   8:Generated_Source\PSoC5/RTC_INT.c **** *
   9:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  10:Generated_Source\PSoC5/RTC_INT.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  11:Generated_Source\PSoC5/RTC_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:Generated_Source\PSoC5/RTC_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:Generated_Source\PSoC5/RTC_INT.c **** * the software package with which this file was provided.
  14:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  15:Generated_Source\PSoC5/RTC_INT.c **** 
  16:Generated_Source\PSoC5/RTC_INT.c **** #include "RTC.h"
  17:Generated_Source\PSoC5/RTC_INT.c **** #include "CyLib.h"
  18:Generated_Source\PSoC5/RTC_INT.c **** #include "cyapicallbacks.h"
  19:Generated_Source\PSoC5/RTC_INT.c **** 
  20:Generated_Source\PSoC5/RTC_INT.c **** /* Function Prototypes */
  21:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void);
  22:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void);
  23:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void);
  24:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void);
  25:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void);
  26:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void);
  27:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void);
  28:Generated_Source\PSoC5/RTC_INT.c **** 
  29:Generated_Source\PSoC5/RTC_INT.c **** 
  30:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 2


  31:Generated_Source\PSoC5/RTC_INT.c **** *  Place your includes, defines and code here
  32:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  33:Generated_Source\PSoC5/RTC_INT.c **** /* `#START RTC_ISR_DEFINITION` */
  34:Generated_Source\PSoC5/RTC_INT.c **** 
  35:Generated_Source\PSoC5/RTC_INT.c **** /* `#END` */
  36:Generated_Source\PSoC5/RTC_INT.c **** 
  37:Generated_Source\PSoC5/RTC_INT.c **** 
  38:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  39:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EverySecondHandler
  40:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  41:Generated_Source\PSoC5/RTC_INT.c **** *
  42:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  43:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every second.
  44:Generated_Source\PSoC5/RTC_INT.c **** *
  45:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  46:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  47:Generated_Source\PSoC5/RTC_INT.c **** *
  48:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  49:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  50:Generated_Source\PSoC5/RTC_INT.c **** *
  51:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  52:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void)
  53:Generated_Source\PSoC5/RTC_INT.c **** {
  54:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every second handler code here. */
  55:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_SECOND_HANDLER_CODE` */
  56:Generated_Source\PSoC5/RTC_INT.c **** 
  57:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  58:Generated_Source\PSoC5/RTC_INT.c ****     
  59:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_SECOND_HANDLER_CALLBACK
  60:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler_Callback();
  61:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_SECOND_HANDLER_CALLBACK */
  62:Generated_Source\PSoC5/RTC_INT.c **** }
  63:Generated_Source\PSoC5/RTC_INT.c **** 
  64:Generated_Source\PSoC5/RTC_INT.c **** 
  65:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  66:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMinuteHandler
  67:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  68:Generated_Source\PSoC5/RTC_INT.c **** *
  69:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  70:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every minute.
  71:Generated_Source\PSoC5/RTC_INT.c **** *
  72:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  73:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  74:Generated_Source\PSoC5/RTC_INT.c **** *
  75:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  76:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  77:Generated_Source\PSoC5/RTC_INT.c **** *
  78:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  79:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void)
  80:Generated_Source\PSoC5/RTC_INT.c **** {
  81:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every minute handler code here. */
  82:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MINUTE_HANDLER_CODE` */
  83:Generated_Source\PSoC5/RTC_INT.c **** 
  84:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  85:Generated_Source\PSoC5/RTC_INT.c **** 
  86:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MINUTE_HANDLER_CALLBACK
  87:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMinuteHandler_Callback();
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 3


  88:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MINUTE_HANDLER_CALLBACK */    
  89:Generated_Source\PSoC5/RTC_INT.c **** }
  90:Generated_Source\PSoC5/RTC_INT.c **** 
  91:Generated_Source\PSoC5/RTC_INT.c **** 
  92:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  93:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryHourHandler
  94:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  95:Generated_Source\PSoC5/RTC_INT.c **** *
  96:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  97:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every hour.
  98:Generated_Source\PSoC5/RTC_INT.c **** *
  99:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 100:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 101:Generated_Source\PSoC5/RTC_INT.c **** *
 102:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 103:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 104:Generated_Source\PSoC5/RTC_INT.c **** *
 105:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 106:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void)
 107:Generated_Source\PSoC5/RTC_INT.c **** {
 108:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every hour handler code here. */
 109:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_HOUR_HANDLER_CODE` */
 110:Generated_Source\PSoC5/RTC_INT.c **** 
 111:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 112:Generated_Source\PSoC5/RTC_INT.c ****     
 113:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_HOUR_HANDLER_CALLBACK
 114:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryHourHandler_Callback();
 115:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_HOUR_HANDLER_CALLBACK */
 116:Generated_Source\PSoC5/RTC_INT.c **** }
 117:Generated_Source\PSoC5/RTC_INT.c **** 
 118:Generated_Source\PSoC5/RTC_INT.c **** 
 119:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 120:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryDayHandler
 121:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 122:Generated_Source\PSoC5/RTC_INT.c **** *
 123:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 124:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every day.
 125:Generated_Source\PSoC5/RTC_INT.c **** *
 126:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 127:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 128:Generated_Source\PSoC5/RTC_INT.c **** *
 129:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 130:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 131:Generated_Source\PSoC5/RTC_INT.c **** *
 132:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 133:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void)
 134:Generated_Source\PSoC5/RTC_INT.c **** {
 135:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your everyday handler code here. */
 136:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_DAY_HANDLER_CODE` */
 137:Generated_Source\PSoC5/RTC_INT.c **** 
 138:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 139:Generated_Source\PSoC5/RTC_INT.c ****     
 140:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_DAY_HANDLER_CALLBACK
 141:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryDayHandler_Callback();
 142:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_DAY_HANDLER_CALLBACK */
 143:Generated_Source\PSoC5/RTC_INT.c **** }
 144:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 4


 145:Generated_Source\PSoC5/RTC_INT.c **** 
 146:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 147:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryWeekHandler
 148:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 149:Generated_Source\PSoC5/RTC_INT.c **** *
 150:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 151:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every week.
 152:Generated_Source\PSoC5/RTC_INT.c **** *
 153:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 154:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 155:Generated_Source\PSoC5/RTC_INT.c **** *
 156:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 157:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 158:Generated_Source\PSoC5/RTC_INT.c **** *
 159:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 160:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void)
 161:Generated_Source\PSoC5/RTC_INT.c **** {
 162:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every week handler code here. */
 163:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_WEEK_HANDLER_CODE` */
 164:Generated_Source\PSoC5/RTC_INT.c **** 
 165:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 166:Generated_Source\PSoC5/RTC_INT.c **** 
 167:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_WEEK_HANDLER_CALLBACK
 168:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryWeekHandler_Callback();
 169:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_WEEK_HANDLER_CALLBACK */
 170:Generated_Source\PSoC5/RTC_INT.c **** }
 171:Generated_Source\PSoC5/RTC_INT.c **** 
 172:Generated_Source\PSoC5/RTC_INT.c **** 
 173:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 174:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMonthHandler
 175:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 176:Generated_Source\PSoC5/RTC_INT.c **** *
 177:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 178:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every month.
 179:Generated_Source\PSoC5/RTC_INT.c **** *
 180:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 181:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 182:Generated_Source\PSoC5/RTC_INT.c **** *
 183:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 184:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 185:Generated_Source\PSoC5/RTC_INT.c **** *
 186:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 187:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void)
 188:Generated_Source\PSoC5/RTC_INT.c **** {
 189:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every month handler code here. */
 190:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MONTH_HANDLER_CODE` */
 191:Generated_Source\PSoC5/RTC_INT.c **** 
 192:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 193:Generated_Source\PSoC5/RTC_INT.c ****     
 194:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MONTH_HANDLER_CALLBACK
 195:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMonthHandler_Callback();
 196:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MONTH_HANDLER_CALLBACK */
 197:Generated_Source\PSoC5/RTC_INT.c **** }
 198:Generated_Source\PSoC5/RTC_INT.c **** 
 199:Generated_Source\PSoC5/RTC_INT.c **** 
 200:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 201:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryYearHandler
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 5


 202:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 203:Generated_Source\PSoC5/RTC_INT.c **** *
 204:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 205:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every year.
 206:Generated_Source\PSoC5/RTC_INT.c **** *
 207:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 208:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 209:Generated_Source\PSoC5/RTC_INT.c **** *
 210:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 211:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 212:Generated_Source\PSoC5/RTC_INT.c **** *
 213:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 214:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void)
 215:Generated_Source\PSoC5/RTC_INT.c **** {
 216:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every year handler code here. */
 217:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_YEAR_HANDLER_CODE` */
 218:Generated_Source\PSoC5/RTC_INT.c **** 
 219:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 220:Generated_Source\PSoC5/RTC_INT.c **** 
 221:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_YEAR_HANDLER_CALLBACK
 222:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryYearHandler_Callback();
 223:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_YEAR_HANDLER_CALLBACK */    
 224:Generated_Source\PSoC5/RTC_INT.c **** }
 225:Generated_Source\PSoC5/RTC_INT.c **** 
 226:Generated_Source\PSoC5/RTC_INT.c **** 
 227:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 228:Generated_Source\PSoC5/RTC_INT.c **** * Function Name: RTC_ISR
 229:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 230:Generated_Source\PSoC5/RTC_INT.c **** *
 231:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 232:Generated_Source\PSoC5/RTC_INT.c **** *  This ISR is executed on 1PPS (one pulse per second) event.
 233:Generated_Source\PSoC5/RTC_INT.c **** *  Global interrupt must be enabled to invoke this ISR.
 234:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt trigs every second.
 235:Generated_Source\PSoC5/RTC_INT.c **** *
 236:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 237:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 238:Generated_Source\PSoC5/RTC_INT.c **** *
 239:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 240:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 241:Generated_Source\PSoC5/RTC_INT.c **** *
 242:Generated_Source\PSoC5/RTC_INT.c **** * Global variables:
 243:Generated_Source\PSoC5/RTC_INT.c **** * RTC_currentTimeDate, RTC_dstTimeDateStart,
 244:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStop, RTC_dstTimeDateStart,
 245:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCfgTimeDate, RTC_statusDateTime,
 246:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStartStatus,
 247:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStopStatus, RTC_alarmCurStatus: global
 248:Generated_Source\PSoC5/RTC_INT.c **** *  variables are used for the time/date, DST and alarm update procedure.
 249:Generated_Source\PSoC5/RTC_INT.c **** *
 250:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStart and RTC_currentTimeDate:
 251:Generated_Source\PSoC5/RTC_INT.c **** *  are modified with the updated values.
 252:Generated_Source\PSoC5/RTC_INT.c **** *
 253:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_statusDateTime, RTC_dstStartStatus,
 254:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStopStatus,
 255:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCurStatus: global variables could be modified while
 256:Generated_Source\PSoC5/RTC_INT.c **** *  current time/date is updated.
 257:Generated_Source\PSoC5/RTC_INT.c **** *
 258:Generated_Source\PSoC5/RTC_INT.c **** * Side Effects:
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 6


 259:Generated_Source\PSoC5/RTC_INT.c **** *  Clears all interrupt status bits (react_int, limact_int, onepps_int, ctw_int,
 260:Generated_Source\PSoC5/RTC_INT.c **** *  and  ftw_int) in Power Manager Interrupt Status Register. If an interrupt
 261:Generated_Source\PSoC5/RTC_INT.c **** *  gets generated at the same time as a clear, the bit will remain set (which
 262:Generated_Source\PSoC5/RTC_INT.c **** *  causes another interrupt).
 263:Generated_Source\PSoC5/RTC_INT.c **** *
 264:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 265:Generated_Source\PSoC5/RTC_INT.c **** CY_ISR(RTC_ISR)
 266:Generated_Source\PSoC5/RTC_INT.c **** {
  28              		.loc 1 266 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
 267:Generated_Source\PSoC5/RTC_INT.c ****     uint8 RTC_tmp;
 268:Generated_Source\PSoC5/RTC_INT.c **** 
 269:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_ENTRY_CALLBACK
 270:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_EntryCallback();
 271:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_ENTRY_CALLBACK */
 272:Generated_Source\PSoC5/RTC_INT.c ****     
 273:Generated_Source\PSoC5/RTC_INT.c ****     /* Clear OPPS interrupt status flag */
 274:Generated_Source\PSoC5/RTC_INT.c ****     (void) CyPmReadStatus(CY_PM_ONEPPS_INT);
  36              		.loc 1 274 0
  37 0002 0420     		movs	r0, #4
  38 0004 FFF7FEFF 		bl	CyPmReadStatus
  39              	.LVL0:
 275:Generated_Source\PSoC5/RTC_INT.c **** 
 276:Generated_Source\PSoC5/RTC_INT.c ****     /* Increment seconds counter */
 277:Generated_Source\PSoC5/RTC_INT.c ****     RTC_currentTimeDate.Sec++;
  40              		.loc 1 277 0
  41 0008 954A     		ldr	r2, .L39
  42 000a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  43 000c 0133     		adds	r3, r3, #1
  44 000e DBB2     		uxtb	r3, r3
  45 0010 1370     		strb	r3, [r2]
 278:Generated_Source\PSoC5/RTC_INT.c **** 
 279:Generated_Source\PSoC5/RTC_INT.c ****     /* Check if minute elapsed */
 280:Generated_Source\PSoC5/RTC_INT.c ****     if(RTC_currentTimeDate.Sec > RTC_MINUTE_ELAPSED)
  46              		.loc 1 280 0
  47 0012 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  48 0014 DBB2     		uxtb	r3, r3
  49 0016 3B2B     		cmp	r3, #59
  50 0018 40F2D281 		bls	.L2
 281:Generated_Source\PSoC5/RTC_INT.c ****     {
 282:Generated_Source\PSoC5/RTC_INT.c ****         /* Inc Min */
 283:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Min++;
  51              		.loc 1 283 0
  52 001c 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
  53 001e 0133     		adds	r3, r3, #1
  54 0020 DBB2     		uxtb	r3, r3
  55 0022 5370     		strb	r3, [r2, #1]
 284:Generated_Source\PSoC5/RTC_INT.c **** 
 285:Generated_Source\PSoC5/RTC_INT.c ****         /* Clear Sec */
 286:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Sec = 0u;
  56              		.loc 1 286 0
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 7


  57 0024 0023     		movs	r3, #0
  58 0026 1370     		strb	r3, [r2]
 287:Generated_Source\PSoC5/RTC_INT.c **** 
 288:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
  59              		.loc 1 288 0
  60 0028 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
  61 002a DBB2     		uxtb	r3, r3
  62 002c 3B2B     		cmp	r3, #59
  63 002e 40F29B81 		bls	.L3
 289:Generated_Source\PSoC5/RTC_INT.c ****         {
 290:Generated_Source\PSoC5/RTC_INT.c ****             /* Inc HOUR */
 291:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Hour++;
  64              		.loc 1 291 0
  65 0032 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
  66 0034 0133     		adds	r3, r3, #1
  67 0036 DBB2     		uxtb	r3, r3
  68 0038 9370     		strb	r3, [r2, #2]
 292:Generated_Source\PSoC5/RTC_INT.c **** 
 293:Generated_Source\PSoC5/RTC_INT.c ****             /* Clear Min */
 294:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Min = 0u;
  69              		.loc 1 294 0
  70 003a 0023     		movs	r3, #0
  71 003c 5370     		strb	r3, [r2, #1]
 295:Generated_Source\PSoC5/RTC_INT.c **** 
 296:Generated_Source\PSoC5/RTC_INT.c ****             /* Day roll over */
 297:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
  72              		.loc 1 297 0
  73 003e 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
  74 0040 DBB2     		uxtb	r3, r3
  75 0042 172B     		cmp	r3, #23
  76 0044 40F25481 		bls	.L4
 298:Generated_Source\PSoC5/RTC_INT.c ****             {
 299:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfMonth */
 300:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfMonth++;
  77              		.loc 1 300 0
  78 0048 1346     		mov	r3, r2
  79 004a 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
  80 004c 0132     		adds	r2, r2, #1
  81 004e D2B2     		uxtb	r2, r2
  82 0050 1A71     		strb	r2, [r3, #4]
 301:Generated_Source\PSoC5/RTC_INT.c **** 
 302:Generated_Source\PSoC5/RTC_INT.c ****                 /* Clear Hour */
 303:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.Hour = 0u;
  83              		.loc 1 303 0
  84 0052 0022     		movs	r2, #0
  85 0054 9A70     		strb	r2, [r3, #2]
 304:Generated_Source\PSoC5/RTC_INT.c **** 
 305:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfYear */
 306:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfYear++;
  86              		.loc 1 306 0
  87 0056 DA88     		ldrh	r2, [r3, #6]
  88 0058 92B2     		uxth	r2, r2
  89 005a 0132     		adds	r2, r2, #1
  90 005c 92B2     		uxth	r2, r2
  91 005e DA80     		strh	r2, [r3, #6]	@ movhi
 307:Generated_Source\PSoC5/RTC_INT.c **** 
 308:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfWeek */
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 8


 309:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfWeek++;
  92              		.loc 1 309 0
  93 0060 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
  94 0062 0132     		adds	r2, r2, #1
  95 0064 D2B2     		uxtb	r2, r2
  96 0066 DA70     		strb	r2, [r3, #3]
 310:Generated_Source\PSoC5/RTC_INT.c **** 
 311:Generated_Source\PSoC5/RTC_INT.c ****                 /* Check DayOfWeek */
 312:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
  97              		.loc 1 312 0
  98 0068 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
  99 006a DBB2     		uxtb	r3, r3
 100 006c 072B     		cmp	r3, #7
 101 006e 02D9     		bls	.L5
 313:Generated_Source\PSoC5/RTC_INT.c ****                 {
 314:Generated_Source\PSoC5/RTC_INT.c ****                     /* start new week */
 315:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfWeek = 1u;
 102              		.loc 1 315 0
 103 0070 0122     		movs	r2, #1
 104 0072 7B4B     		ldr	r3, .L39
 105 0074 DA70     		strb	r2, [r3, #3]
 106              	.L5:
 316:Generated_Source\PSoC5/RTC_INT.c ****                 }
 317:Generated_Source\PSoC5/RTC_INT.c **** 
 318:Generated_Source\PSoC5/RTC_INT.c ****                 /* Day of month roll over.
 319:Generated_Source\PSoC5/RTC_INT.c ****                 * Check if day of month greater than 29 in February of leap year or
 320:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than 28 NOT in February of NON leap year or
 321:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than it should be in every month in non leap year
 322:Generated_Source\PSoC5/RTC_INT.c ****                 */
 323:Generated_Source\PSoC5/RTC_INT.c ****                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 107              		.loc 1 323 0
 108 0076 7B4B     		ldr	r3, .L39+4
 109 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 110 007a 13F0020F 		tst	r3, #2
 111 007e 0ED0     		beq	.L6
 324:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 112              		.loc 1 324 0 discriminator 1
 113 0080 774B     		ldr	r3, .L39
 114 0082 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 115 0084 DBB2     		uxtb	r3, r3
 323:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 116              		.loc 1 323 0 discriminator 1
 117 0086 022B     		cmp	r3, #2
 118 0088 09D1     		bne	.L6
 325:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 119              		.loc 1 325 0
 120 008a 754B     		ldr	r3, .L39
 121 008c 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 122 008e D2B2     		uxtb	r2, r2
 326:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 123              		.loc 1 326 0
 124 0090 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 125 0092 013B     		subs	r3, r3, #1
 126 0094 7449     		ldr	r1, .L39+8
 127 0096 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 128 0098 0133     		adds	r3, r3, #1
 324:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 9


 129              		.loc 1 324 0
 130 009a 9A42     		cmp	r2, r3
 131 009c 22D8     		bhi	.L7
 132              	.L6:
 327:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 133              		.loc 1 327 0
 134 009e 714B     		ldr	r3, .L39+4
 135 00a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 326:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 136              		.loc 1 326 0
 137 00a2 13F0020F 		tst	r3, #2
 138 00a6 0DD0     		beq	.L8
 328:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 139              		.loc 1 328 0
 140 00a8 6D4B     		ldr	r3, .L39
 141 00aa 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 142 00ac DBB2     		uxtb	r3, r3
 327:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 143              		.loc 1 327 0
 144 00ae 022B     		cmp	r3, #2
 145 00b0 08D0     		beq	.L8
 329:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 146              		.loc 1 329 0
 147 00b2 6B4A     		ldr	r2, .L39
 148 00b4 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 149 00b6 DBB2     		uxtb	r3, r3
 330:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 150              		.loc 1 330 0
 151 00b8 127A     		ldrb	r2, [r2, #8]	@ zero_extendqisi2
 152 00ba 013A     		subs	r2, r2, #1
 153 00bc 6A49     		ldr	r1, .L39+8
 154 00be 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 328:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 155              		.loc 1 328 0
 156 00c0 9342     		cmp	r3, r2
 157 00c2 0FD8     		bhi	.L7
 158              	.L8:
 331:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 159              		.loc 1 331 0
 160 00c4 674B     		ldr	r3, .L39+4
 161 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 330:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 162              		.loc 1 330 0
 163 00c8 13F0020F 		tst	r3, #2
 164 00cc 40F09D80 		bne	.L9
 332:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 165              		.loc 1 332 0
 166 00d0 634A     		ldr	r2, .L39
 167 00d2 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 168 00d4 DBB2     		uxtb	r3, r3
 333:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 169              		.loc 1 333 0
 170 00d6 127A     		ldrb	r2, [r2, #8]	@ zero_extendqisi2
 171 00d8 013A     		subs	r2, r2, #1
 172 00da 6349     		ldr	r1, .L39+8
 173 00dc 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 331:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 10


 174              		.loc 1 331 0
 175 00de 9342     		cmp	r3, r2
 176 00e0 40F29380 		bls	.L9
 177              	.L7:
 334:Generated_Source\PSoC5/RTC_INT.c ****                 {
 335:Generated_Source\PSoC5/RTC_INT.c ****                     /* Inc Month */
 336:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.Month++;
 178              		.loc 1 336 0
 179 00e4 5E4A     		ldr	r2, .L39
 180 00e6 137A     		ldrb	r3, [r2, #8]	@ zero_extendqisi2
 181 00e8 0133     		adds	r3, r3, #1
 182 00ea DBB2     		uxtb	r3, r3
 183 00ec 1372     		strb	r3, [r2, #8]
 337:Generated_Source\PSoC5/RTC_INT.c **** 
 338:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set first day of month */
 339:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfMonth = 1u;
 184              		.loc 1 339 0
 185 00ee 0123     		movs	r3, #1
 186 00f0 1371     		strb	r3, [r2, #4]
 340:Generated_Source\PSoC5/RTC_INT.c **** 
 341:Generated_Source\PSoC5/RTC_INT.c ****                     /* Year roll over */
 342:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 187              		.loc 1 342 0
 188 00f2 137A     		ldrb	r3, [r2, #8]	@ zero_extendqisi2
 189 00f4 DBB2     		uxtb	r3, r3
 190 00f6 0C2B     		cmp	r3, #12
 191 00f8 5BD9     		bls	.L10
 343:Generated_Source\PSoC5/RTC_INT.c ****                     {
 344:Generated_Source\PSoC5/RTC_INT.c ****                         /* Inc Year */
 345:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Year++;
 192              		.loc 1 345 0
 193 00fa 5389     		ldrh	r3, [r2, #10]
 194 00fc 9BB2     		uxth	r3, r3
 195 00fe 0133     		adds	r3, r3, #1
 196 0100 9BB2     		uxth	r3, r3
 197 0102 5381     		strh	r3, [r2, #10]	@ movhi
 346:Generated_Source\PSoC5/RTC_INT.c **** 
 347:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first month of year */
 348:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Month = 1u;
 198              		.loc 1 348 0
 199 0104 0123     		movs	r3, #1
 200 0106 1372     		strb	r3, [r2, #8]
 349:Generated_Source\PSoC5/RTC_INT.c **** 
 350:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first day of year */
 351:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.DayOfYear = 1u;
 201              		.loc 1 351 0
 202 0108 D380     		strh	r3, [r2, #6]	@ movhi
 352:Generated_Source\PSoC5/RTC_INT.c **** 
 353:Generated_Source\PSoC5/RTC_INT.c ****                         /* Is this year leap */
 354:Generated_Source\PSoC5/RTC_INT.c ****                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 203              		.loc 1 354 0
 204 010a 5389     		ldrh	r3, [r2, #10]
 205 010c 9BB2     		uxth	r3, r3
 206 010e 574A     		ldr	r2, .L39+12
 207 0110 A2FB0312 		umull	r1, r2, r2, r3
 208 0114 D209     		lsrs	r2, r2, #7
 209 0116 4FF4C871 		mov	r1, #400
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 11


 210 011a 01FB1233 		mls	r3, r1, r2, r3
 211 011e 9BB2     		uxth	r3, r3
 212 0120 83B1     		cbz	r3, .L11
 213              		.loc 1 354 0 is_stmt 0 discriminator 1
 214 0122 4F4B     		ldr	r3, .L39
 215 0124 5B89     		ldrh	r3, [r3, #10]
 216 0126 13F0030F 		tst	r3, #3
 217 012a 11D1     		bne	.L12
 218              		.loc 1 354 0 discriminator 2
 219 012c 4C4B     		ldr	r3, .L39
 220 012e 5B89     		ldrh	r3, [r3, #10]
 221 0130 9BB2     		uxth	r3, r3
 222 0132 4E4A     		ldr	r2, .L39+12
 223 0134 A2FB0312 		umull	r1, r2, r2, r3
 224 0138 5209     		lsrs	r2, r2, #5
 225 013a 6421     		movs	r1, #100
 226 013c 01FB1233 		mls	r3, r1, r2, r3
 227 0140 9BB2     		uxth	r3, r3
 228 0142 2BB1     		cbz	r3, .L12
 229              	.L11:
 355:Generated_Source\PSoC5/RTC_INT.c ****                         {
 356:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set leap year flag */
 357:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_LY;
 230              		.loc 1 357 0 is_stmt 1
 231 0144 474A     		ldr	r2, .L39+4
 232 0146 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 233 0148 43F00203 		orr	r3, r3, #2
 234 014c 1370     		strb	r3, [r2]
 235 014e 04E0     		b	.L13
 236              	.L12:
 358:Generated_Source\PSoC5/RTC_INT.c ****                         }
 359:Generated_Source\PSoC5/RTC_INT.c ****                         else    /* not leap year */
 360:Generated_Source\PSoC5/RTC_INT.c ****                         {
 361:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear leap year */
 362:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 237              		.loc 1 362 0
 238 0150 444A     		ldr	r2, .L39+4
 239 0152 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 240 0154 03F0FD03 		and	r3, r3, #253
 241 0158 1370     		strb	r3, [r2]
 242              	.L13:
 363:Generated_Source\PSoC5/RTC_INT.c ****                         }
 364:Generated_Source\PSoC5/RTC_INT.c **** 
 365:Generated_Source\PSoC5/RTC_INT.c ****                         /* Alarm YEAR */
 366:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 243              		.loc 1 366 0
 244 015a 454B     		ldr	r3, .L39+16
 245 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 246 015e 13F0800F 		tst	r3, #128
 247 0162 12D0     		beq	.L14
 367:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_ALARM_YEAR_MASK))
 368:Generated_Source\PSoC5/RTC_INT.c ****                         {
 369:Generated_Source\PSoC5/RTC_INT.c ****                             /* Years match */
 370:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 248              		.loc 1 370 0
 249 0164 434B     		ldr	r3, .L39+20
 250 0166 5A89     		ldrh	r2, [r3, #10]
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 12


 251 0168 92B2     		uxth	r2, r2
 252 016a 3D4B     		ldr	r3, .L39
 253 016c 5B89     		ldrh	r3, [r3, #10]
 254 016e 9BB2     		uxth	r3, r3
 255 0170 9A42     		cmp	r2, r3
 256 0172 05D1     		bne	.L15
 371:Generated_Source\PSoC5/RTC_INT.c ****                             {
 372:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Rise year alarm */
 373:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 257              		.loc 1 373 0
 258 0174 404A     		ldr	r2, .L39+24
 259 0176 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 260 0178 43F08003 		orr	r3, r3, #128
 261 017c 1370     		strb	r3, [r2]
 262 017e 04E0     		b	.L14
 263              	.L15:
 374:Generated_Source\PSoC5/RTC_INT.c ****                             }
 375:Generated_Source\PSoC5/RTC_INT.c ****                             else    /* Years do not match */
 376:Generated_Source\PSoC5/RTC_INT.c ****                             {
 377:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Clear year alarm */
 378:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 264              		.loc 1 378 0
 265 0180 3D4A     		ldr	r2, .L39+24
 266 0182 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 267 0184 03F07F03 		and	r3, r3, #127
 268 0188 1370     		strb	r3, [r2]
 269              	.L14:
 379:Generated_Source\PSoC5/RTC_INT.c ****                             }
 380:Generated_Source\PSoC5/RTC_INT.c ****                         } /* do not alarm year */
 381:Generated_Source\PSoC5/RTC_INT.c **** 
 382:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set Alarm flag event */
 383:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_tmp = RTC_alarmCfgMask;
 270              		.loc 1 383 0
 271 018a 394B     		ldr	r3, .L39+16
 272 018c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 273              	.LVL1:
 384:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_SET_ALARM(RTC_tmp,
 274              		.loc 1 384 0
 275 018e 03F0FF02 		and	r2, r3, #255
 276 0192 63B1     		cbz	r3, .L16
 277              		.loc 1 384 0 is_stmt 0 discriminator 1
 278 0194 384B     		ldr	r3, .L39+24
 279              	.LVL2:
 280 0196 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 281 0198 32EA0303 		bics	r3, r2, r3
 282 019c 07D1     		bne	.L16
 283              		.loc 1 384 0 discriminator 2
 284 019e 314A     		ldr	r2, .L39+4
 285 01a0 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 286 01a2 43F00803 		orr	r3, r3, #8
 287 01a6 1370     		strb	r3, [r2]
 288 01a8 0022     		movs	r2, #0
 289 01aa 334B     		ldr	r3, .L39+24
 290 01ac 1A70     		strb	r2, [r3]
 291              	.L16:
 385:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_alarmCurStatus,
 386:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_statusDateTime);
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 13


 387:Generated_Source\PSoC5/RTC_INT.c **** 
 388:Generated_Source\PSoC5/RTC_INT.c ****                         /* Every Year */
 389:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 292              		.loc 1 389 0 is_stmt 1
 293 01ae 334B     		ldr	r3, .L39+28
 294 01b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 295              	.L10:
 390:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_INTERVAL_YEAR_MASK))
 391:Generated_Source\PSoC5/RTC_INT.c ****                         {
 392:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_EveryYearHandler();
 393:Generated_Source\PSoC5/RTC_INT.c ****                         }
 394:Generated_Source\PSoC5/RTC_INT.c **** 
 395:Generated_Source\PSoC5/RTC_INT.c ****                     } /* Month > 12 */
 396:Generated_Source\PSoC5/RTC_INT.c **** 
 397:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 398:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 296              		.loc 1 398 0
 297 01b2 2F4B     		ldr	r3, .L39+16
 298 01b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 299 01b6 13F0400F 		tst	r3, #64
 300 01ba 12D0     		beq	.L17
 399:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 400:Generated_Source\PSoC5/RTC_INT.c ****                     {
 401:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 301              		.loc 1 401 0
 302 01bc 2D4B     		ldr	r3, .L39+20
 303 01be 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 304 01c0 D2B2     		uxtb	r2, r2
 305 01c2 274B     		ldr	r3, .L39
 306 01c4 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 307 01c6 DBB2     		uxtb	r3, r3
 308 01c8 9A42     		cmp	r2, r3
 309 01ca 05D1     		bne	.L18
 402:Generated_Source\PSoC5/RTC_INT.c ****                         {
 403:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set month alarm */
 404:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 310              		.loc 1 404 0
 311 01cc 2A4A     		ldr	r2, .L39+24
 312 01ce 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 313 01d0 43F04003 		orr	r3, r3, #64
 314 01d4 1370     		strb	r3, [r2]
 315 01d6 04E0     		b	.L17
 316              	.L18:
 405:Generated_Source\PSoC5/RTC_INT.c ****                         }
 406:Generated_Source\PSoC5/RTC_INT.c ****                         else
 407:Generated_Source\PSoC5/RTC_INT.c ****                         {
 408:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear month alarm */
 409:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 317              		.loc 1 409 0
 318 01d8 274A     		ldr	r2, .L39+24
 319 01da 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 320 01dc 03F0BF03 		and	r3, r3, #191
 321 01e0 1370     		strb	r3, [r2]
 322              	.L17:
 410:Generated_Source\PSoC5/RTC_INT.c ****                         }
 411:Generated_Source\PSoC5/RTC_INT.c ****                     }   /* Month alarm is masked */
 412:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 14


 413:Generated_Source\PSoC5/RTC_INT.c ****                     #if (1u == RTC_DST_FUNC_ENABLE)
 414:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 415:Generated_Source\PSoC5/RTC_INT.c ****                         {
 416:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus |= RTC_DST_MONTH;
 417:Generated_Source\PSoC5/RTC_INT.c ****                         }
 418:Generated_Source\PSoC5/RTC_INT.c ****                         else
 419:Generated_Source\PSoC5/RTC_INT.c ****                         {
 420:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 421:Generated_Source\PSoC5/RTC_INT.c ****                         }
 422:Generated_Source\PSoC5/RTC_INT.c **** 
 423:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStart.Month == RTC_currentTimeDate.Month)
 424:Generated_Source\PSoC5/RTC_INT.c ****                         {
 425:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus |= RTC_DST_MONTH;
 426:Generated_Source\PSoC5/RTC_INT.c ****                         }
 427:Generated_Source\PSoC5/RTC_INT.c ****                         else
 428:Generated_Source\PSoC5/RTC_INT.c ****                         {
 429:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus &= (uint8)(~RTC_DST_MONTH);
 430:Generated_Source\PSoC5/RTC_INT.c ****                         }
 431:Generated_Source\PSoC5/RTC_INT.c ****                     #endif /* 1u == RTC_DST_FUNC_ENABLE */
 432:Generated_Source\PSoC5/RTC_INT.c **** 
 433:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 434:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 323              		.loc 1 434 0
 324 01e2 234B     		ldr	r3, .L39+16
 325 01e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 326              	.LVL3:
 435:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 327              		.loc 1 435 0
 328 01e6 03F0FF02 		and	r2, r3, #255
 329 01ea 63B1     		cbz	r3, .L19
 330              		.loc 1 435 0 is_stmt 0 discriminator 1
 331 01ec 224B     		ldr	r3, .L39+24
 332              	.LVL4:
 333 01ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 334 01f0 32EA0303 		bics	r3, r2, r3
 335 01f4 07D1     		bne	.L19
 336              		.loc 1 435 0 discriminator 2
 337 01f6 1B4A     		ldr	r2, .L39+4
 338 01f8 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 339 01fa 43F00803 		orr	r3, r3, #8
 340 01fe 1370     		strb	r3, [r2]
 341 0200 0022     		movs	r2, #0
 342 0202 1D4B     		ldr	r3, .L39+24
 343 0204 1A70     		strb	r2, [r3]
 344              	.L19:
 436:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 437:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 438:Generated_Source\PSoC5/RTC_INT.c **** 
 439:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Month */
 440:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 345              		.loc 1 440 0 is_stmt 1
 346 0206 1D4B     		ldr	r3, .L39+28
 347 0208 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 348              	.L9:
 441:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_MONTH_MASK))
 442:Generated_Source\PSoC5/RTC_INT.c ****                     {
 443:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_EveryMonthHandler();
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 15


 444:Generated_Source\PSoC5/RTC_INT.c ****                     }
 445:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day roll over */
 446:Generated_Source\PSoC5/RTC_INT.c **** 
 447:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFWEEK */
 448:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 349              		.loc 1 448 0
 350 020a 194B     		ldr	r3, .L39+16
 351 020c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 352 020e 13F0080F 		tst	r3, #8
 353 0212 12D0     		beq	.L20
 449:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFWEEK_MASK))
 450:Generated_Source\PSoC5/RTC_INT.c ****                 {
 451:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 354              		.loc 1 451 0
 355 0214 174B     		ldr	r3, .L39+20
 356 0216 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 357 0218 D2B2     		uxtb	r2, r2
 358 021a 114B     		ldr	r3, .L39
 359 021c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 360 021e DBB2     		uxtb	r3, r3
 361 0220 9A42     		cmp	r2, r3
 362 0222 05D1     		bne	.L21
 452:Generated_Source\PSoC5/RTC_INT.c ****                     {
 453:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of week alarm */
 454:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 363              		.loc 1 454 0
 364 0224 144A     		ldr	r2, .L39+24
 365 0226 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 366 0228 43F00803 		orr	r3, r3, #8
 367 022c 1370     		strb	r3, [r2]
 368 022e 04E0     		b	.L20
 369              	.L21:
 455:Generated_Source\PSoC5/RTC_INT.c ****                     }
 456:Generated_Source\PSoC5/RTC_INT.c ****                     else
 457:Generated_Source\PSoC5/RTC_INT.c ****                     {
 458:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of week alarm */
 459:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 370              		.loc 1 459 0
 371 0230 114A     		ldr	r2, .L39+24
 372 0232 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 373 0234 03F0F703 		and	r3, r3, #247
 374 0238 1370     		strb	r3, [r2]
 375              	.L20:
 460:Generated_Source\PSoC5/RTC_INT.c ****                     }
 461:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of week alarm is masked */
 462:Generated_Source\PSoC5/RTC_INT.c **** 
 463:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFYEAR */
 464:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 376              		.loc 1 464 0
 377 023a 0D4B     		ldr	r3, .L39+16
 378 023c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 379 023e 13F0200F 		tst	r3, #32
 380 0242 22D0     		beq	.L22
 465:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFYEAR_MASK))
 466:Generated_Source\PSoC5/RTC_INT.c ****                 {
 467:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 381              		.loc 1 467 0
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 16


 382 0244 0B4B     		ldr	r3, .L39+20
 383 0246 DA88     		ldrh	r2, [r3, #6]
 384 0248 92B2     		uxth	r2, r2
 385 024a 054B     		ldr	r3, .L39
 386 024c DB88     		ldrh	r3, [r3, #6]
 387 024e 9BB2     		uxth	r3, r3
 388 0250 9A42     		cmp	r2, r3
 389 0252 15D1     		bne	.L23
 468:Generated_Source\PSoC5/RTC_INT.c ****                     {
 469:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of year alarm */
 470:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 390              		.loc 1 470 0
 391 0254 084A     		ldr	r2, .L39+24
 392 0256 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 393 0258 43F02003 		orr	r3, r3, #32
 394 025c 1370     		strb	r3, [r2]
 395 025e 14E0     		b	.L22
 396              	.L40:
 397              		.align	2
 398              	.L39:
 399 0260 00000000 		.word	RTC_currentTimeDate
 400 0264 00000000 		.word	RTC_statusDateTime
 401 0268 00000000 		.word	RTC_daysInMonths
 402 026c 1F85EB51 		.word	1374389535
 403 0270 00000000 		.word	RTC_alarmCfgMask
 404 0274 00000000 		.word	RTC_alarmCfgTimeDate
 405 0278 00000000 		.word	RTC_alarmCurStatus
 406 027c 00000000 		.word	RTC_intervalCfgMask
 407              	.L23:
 471:Generated_Source\PSoC5/RTC_INT.c ****                     }
 472:Generated_Source\PSoC5/RTC_INT.c ****                     else
 473:Generated_Source\PSoC5/RTC_INT.c ****                     {
 474:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of year alarm */
 475:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 408              		.loc 1 475 0
 409 0280 664A     		ldr	r2, .L41
 410 0282 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 411 0284 03F0DF03 		and	r3, r3, #223
 412 0288 1370     		strb	r3, [r2]
 413              	.L22:
 476:Generated_Source\PSoC5/RTC_INT.c ****                     }
 477:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of year alarm is masked */
 478:Generated_Source\PSoC5/RTC_INT.c **** 
 479:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFMONTH */
 480:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 414              		.loc 1 480 0
 415 028a 654B     		ldr	r3, .L41+4
 416 028c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 417 028e 13F0100F 		tst	r3, #16
 418 0292 12D0     		beq	.L24
 481:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_ALARM_DAYOFMONTH_MASK))
 482:Generated_Source\PSoC5/RTC_INT.c ****                 {
 483:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 419              		.loc 1 483 0
 420 0294 634B     		ldr	r3, .L41+8
 421 0296 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 422 0298 D2B2     		uxtb	r2, r2
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 17


 423 029a 634B     		ldr	r3, .L41+12
 424 029c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 425 029e DBB2     		uxtb	r3, r3
 426 02a0 9A42     		cmp	r2, r3
 427 02a2 05D1     		bne	.L25
 484:Generated_Source\PSoC5/RTC_INT.c ****                     {
 485:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of month alarm */
 486:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 428              		.loc 1 486 0
 429 02a4 5D4A     		ldr	r2, .L41
 430 02a6 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 431 02a8 43F01003 		orr	r3, r3, #16
 432 02ac 1370     		strb	r3, [r2]
 433 02ae 04E0     		b	.L24
 434              	.L25:
 487:Generated_Source\PSoC5/RTC_INT.c ****                     }
 488:Generated_Source\PSoC5/RTC_INT.c ****                     else
 489:Generated_Source\PSoC5/RTC_INT.c ****                     {
 490:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of month alarm */
 491:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 435              		.loc 1 491 0
 436 02b0 5A4A     		ldr	r2, .L41
 437 02b2 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 438 02b4 03F0EF03 		and	r3, r3, #239
 439 02b8 1370     		strb	r3, [r2]
 440              	.L24:
 492:Generated_Source\PSoC5/RTC_INT.c ****                     }
 493:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of month alarm is masked */
 494:Generated_Source\PSoC5/RTC_INT.c **** 
 495:Generated_Source\PSoC5/RTC_INT.c ****                 #if (1u == RTC_DST_FUNC_ENABLE)
 496:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStop.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 497:Generated_Source\PSoC5/RTC_INT.c ****                     {
 498:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 499:Generated_Source\PSoC5/RTC_INT.c ****                     }
 500:Generated_Source\PSoC5/RTC_INT.c ****                     else
 501:Generated_Source\PSoC5/RTC_INT.c ****                     {
 502:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 503:Generated_Source\PSoC5/RTC_INT.c ****                     }
 504:Generated_Source\PSoC5/RTC_INT.c **** 
 505:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStart.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 506:Generated_Source\PSoC5/RTC_INT.c ****                     {
 507:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus |= RTC_DST_DAYOFMONTH;
 508:Generated_Source\PSoC5/RTC_INT.c ****                     }
 509:Generated_Source\PSoC5/RTC_INT.c ****                     else
 510:Generated_Source\PSoC5/RTC_INT.c ****                     {
 511:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 512:Generated_Source\PSoC5/RTC_INT.c ****                     }
 513:Generated_Source\PSoC5/RTC_INT.c ****                 #endif /* 1u == RTC_DST_FUNC_ENABLE */
 514:Generated_Source\PSoC5/RTC_INT.c **** 
 515:Generated_Source\PSoC5/RTC_INT.c ****                 /* Set Alarm flag event */
 516:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_tmp = RTC_alarmCfgMask;
 441              		.loc 1 516 0
 442 02ba 594B     		ldr	r3, .L41+4
 443 02bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 444              	.LVL5:
 517:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_SET_ALARM(RTC_tmp,
 445              		.loc 1 517 0
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 18


 446 02be 03F0FF02 		and	r2, r3, #255
 447 02c2 63B1     		cbz	r3, .L26
 448              		.loc 1 517 0 is_stmt 0 discriminator 1
 449 02c4 554B     		ldr	r3, .L41
 450              	.LVL6:
 451 02c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 452 02c8 32EA0303 		bics	r3, r2, r3
 453 02cc 07D1     		bne	.L26
 454              		.loc 1 517 0 discriminator 2
 455 02ce 574A     		ldr	r2, .L41+16
 456 02d0 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 457 02d2 43F00803 		orr	r3, r3, #8
 458 02d6 1370     		strb	r3, [r2]
 459 02d8 0022     		movs	r2, #0
 460 02da 504B     		ldr	r3, .L41
 461 02dc 1A70     		strb	r2, [r3]
 462              	.L26:
 518:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_alarmCurStatus,
 519:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_statusDateTime);
 520:Generated_Source\PSoC5/RTC_INT.c **** 
 521:Generated_Source\PSoC5/RTC_INT.c ****                 /* Every Day */
 522:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 463              		.loc 1 522 0 is_stmt 1
 464 02de 544B     		ldr	r3, .L41+20
 465 02e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 523:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_INTERVAL_DAY_MASK))
 524:Generated_Source\PSoC5/RTC_INT.c ****                 {
 525:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_EveryDayHandler();
 526:Generated_Source\PSoC5/RTC_INT.c ****                 }
 527:Generated_Source\PSoC5/RTC_INT.c **** 
 528:Generated_Source\PSoC5/RTC_INT.c ****                 if(1u == RTC_currentTimeDate.DayOfWeek)
 466              		.loc 1 528 0
 467 02e2 514B     		ldr	r3, .L41+12
 468 02e4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 469 02e6 DBB2     		uxtb	r3, r3
 470 02e8 012B     		cmp	r3, #1
 471 02ea 01D1     		bne	.L4
 529:Generated_Source\PSoC5/RTC_INT.c ****                 {
 530:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Week */
 531:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 472              		.loc 1 531 0
 473 02ec 504B     		ldr	r3, .L41+20
 474 02ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 475              	.L4:
 532:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_WEEK_MASK))
 533:Generated_Source\PSoC5/RTC_INT.c ****                     {
 534:Generated_Source\PSoC5/RTC_INT.c ****                        RTC_EveryWeekHandler();
 535:Generated_Source\PSoC5/RTC_INT.c ****                     }
 536:Generated_Source\PSoC5/RTC_INT.c ****                 }
 537:Generated_Source\PSoC5/RTC_INT.c **** 
 538:Generated_Source\PSoC5/RTC_INT.c ****             } /* End of day roll over */
 539:Generated_Source\PSoC5/RTC_INT.c **** 
 540:Generated_Source\PSoC5/RTC_INT.c ****             /* Status set PM/AM flag */
 541:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 476              		.loc 1 541 0
 477 02f0 4D4B     		ldr	r3, .L41+12
 478 02f2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 19


 479 02f4 DBB2     		uxtb	r3, r3
 480 02f6 0B2B     		cmp	r3, #11
 481 02f8 05D8     		bhi	.L27
 542:Generated_Source\PSoC5/RTC_INT.c ****             {
 543:Generated_Source\PSoC5/RTC_INT.c ****                 /* AM Hour 00:00-11:59, flag zero */
 544:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 482              		.loc 1 544 0
 483 02fa 4C4A     		ldr	r2, .L41+16
 484 02fc 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 485 02fe 03F0FB03 		and	r3, r3, #251
 486 0302 1370     		strb	r3, [r2]
 487 0304 04E0     		b	.L28
 488              	.L27:
 545:Generated_Source\PSoC5/RTC_INT.c ****             }
 546:Generated_Source\PSoC5/RTC_INT.c ****             else
 547:Generated_Source\PSoC5/RTC_INT.c ****             {
 548:Generated_Source\PSoC5/RTC_INT.c ****                 /* PM Hour 12:00-23:59, flag set */
 549:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime |= RTC_STATUS_AM_PM;
 489              		.loc 1 549 0
 490 0306 494A     		ldr	r2, .L41+16
 491 0308 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 492 030a 43F00403 		orr	r3, r3, #4
 493 030e 1370     		strb	r3, [r2]
 494              	.L28:
 550:Generated_Source\PSoC5/RTC_INT.c ****             }
 551:Generated_Source\PSoC5/RTC_INT.c **** 
 552:Generated_Source\PSoC5/RTC_INT.c ****             #if (1u == RTC_DST_FUNC_ENABLE)
 553:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStop.Hour == RTC_currentTimeDate.Hour)
 554:Generated_Source\PSoC5/RTC_INT.c ****                 {
 555:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus |= RTC_DST_HOUR;
 556:Generated_Source\PSoC5/RTC_INT.c ****                 }
 557:Generated_Source\PSoC5/RTC_INT.c ****                 else
 558:Generated_Source\PSoC5/RTC_INT.c ****                 {
 559:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus &= (uint8)(~RTC_DST_HOUR);
 560:Generated_Source\PSoC5/RTC_INT.c ****                 }
 561:Generated_Source\PSoC5/RTC_INT.c **** 
 562:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStart.Hour == RTC_currentTimeDate.Hour)
 563:Generated_Source\PSoC5/RTC_INT.c ****                 {
 564:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStartStatus |= RTC_DST_HOUR;
 565:Generated_Source\PSoC5/RTC_INT.c ****                 }
 566:Generated_Source\PSoC5/RTC_INT.c ****                 else
 567:Generated_Source\PSoC5/RTC_INT.c ****                 {
 568:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_dstStartStatus &= (uint8)(~RTC_DST_HOUR);
 569:Generated_Source\PSoC5/RTC_INT.c ****                 }
 570:Generated_Source\PSoC5/RTC_INT.c **** 
 571:Generated_Source\PSoC5/RTC_INT.c ****                 /* DST Enable ? */
 572:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_ENABLE))
 573:Generated_Source\PSoC5/RTC_INT.c ****                 {
 574:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_statusDateTime, RTC_STATUS_DST))
 575:Generated_Source\PSoC5/RTC_INT.c ****                     {
 576:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStopStatus, RTC_DST_HOUR |
 577:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_DAYOFMONTH | RTC_DST_MONTH))
 578:Generated_Source\PSoC5/RTC_INT.c ****                         {
 579:Generated_Source\PSoC5/RTC_INT.c ****                             /* Substruct from current value of minutes, number of minutes
 580:Generated_Source\PSoC5/RTC_INT.c ****                             * in DST offset which is out of complete hour
 581:Generated_Source\PSoC5/RTC_INT.c ****                             */
 582:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min -=
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 20


 583:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 584:Generated_Source\PSoC5/RTC_INT.c **** 
 585:Generated_Source\PSoC5/RTC_INT.c ****                             /* Is minute value negative? */
 586:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 587:Generated_Source\PSoC5/RTC_INT.c ****                             {
 588:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 589:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED -     (~currentTimeDate.Min    ) ==
 590:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED + 1 - (~currentTimeDate.Min + 1)
 591:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 592:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min = RTC_HOUR_ELAPSED -
 593:Generated_Source\PSoC5/RTC_INT.c ****                                                              ((uint8)(~RTC_currentTimeDate.Min));
 594:Generated_Source\PSoC5/RTC_INT.c **** 
 595:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour--;
 596:Generated_Source\PSoC5/RTC_INT.c ****                             }
 597:Generated_Source\PSoC5/RTC_INT.c **** 
 598:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour -= RTC_dstOffsetMin /
 599:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 600:Generated_Source\PSoC5/RTC_INT.c **** 
 601:Generated_Source\PSoC5/RTC_INT.c ****                             /* Day roll over
 602:Generated_Source\PSoC5/RTC_INT.c ****                             * Is hour value negative? */
 603:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 604:Generated_Source\PSoC5/RTC_INT.c ****                             {
 605:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 606:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED - (~currentTimeDate.Hour) ==
 607:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED + 1 - (~currentTimeDate.Hour + 1)
 608:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 609:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour = RTC_DAY_ELAPSED -
 610:Generated_Source\PSoC5/RTC_INT.c ****                                                               ((uint8)(~RTC_currentTimeDate.Hour));
 611:Generated_Source\PSoC5/RTC_INT.c **** 
 612:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 613:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 614:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 615:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 616:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 617:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 618:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 619:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 620:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 621:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 622:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 623:Generated_Source\PSoC5/RTC_INT.c **** 
 624:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth--;
 625:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear--;
 626:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek--;
 627:Generated_Source\PSoC5/RTC_INT.c **** 
 628:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfWeek)
 629:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 630:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = RTC_DAYS_IN_WEEK;
 631:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 632:Generated_Source\PSoC5/RTC_INT.c **** 
 633:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfMonth)
 634:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 635:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month--;
 636:Generated_Source\PSoC5/RTC_INT.c ****                                     if(0u == RTC_currentTimeDate.Month)
 637:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 638:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_DECEMBER;
 639:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 21


 640:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfMonth =
 641:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 642:Generated_Source\PSoC5/RTC_INT.c **** 
 643:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year--;
 644:Generated_Source\PSoC5/RTC_INT.c **** 
 645:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 646:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 647:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 648:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 649:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear =
 650:Generated_Source\PSoC5/RTC_INT.c ****                                                                                     RTC_DAYS_IN_LEA
 651:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 652:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 653:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 654:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 655:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear = RTC_DAYS_IN_YEAR;
 656:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 657:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 658:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 659:Generated_Source\PSoC5/RTC_INT.c ****                                     else
 660:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 661:Generated_Source\PSoC5/RTC_INT.c ****                                         /* Day of month roll over.
 662:Generated_Source\PSoC5/RTC_INT.c ****                                         * Check if day of month February 29 of leap year
 663:Generated_Source\PSoC5/RTC_INT.c ****                                         */
 664:Generated_Source\PSoC5/RTC_INT.c ****                                         if((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 665:Generated_Source\PSoC5/RTC_INT.c ****                                             (RTC_currentTimeDate.Month == RTC_FEBRUARY))
 666:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 667:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 668:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u]
 669:Generated_Source\PSoC5/RTC_INT.c ****                                             + 1u;
 670:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 671:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 672:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 673:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 674:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 675:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 676:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 677:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 678:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 679:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 680:Generated_Source\PSoC5/RTC_INT.c ****                             }
 681:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_DST);
 682:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus = 0u;
 683:Generated_Source\PSoC5/RTC_INT.c ****                         }
 684:Generated_Source\PSoC5/RTC_INT.c ****                     }
 685:Generated_Source\PSoC5/RTC_INT.c ****                     else
 686:Generated_Source\PSoC5/RTC_INT.c ****                     {
 687:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStartStatus,
 688:Generated_Source\PSoC5/RTC_INT.c ****                                                       (RTC_DST_HOUR | RTC_DST_DAYOFMONTH |
 689:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_MONTH)))
 690:Generated_Source\PSoC5/RTC_INT.c ****                         {
 691:Generated_Source\PSoC5/RTC_INT.c ****                             /* Add Hour and Min */
 692:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min +=
 693:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 694:Generated_Source\PSoC5/RTC_INT.c **** 
 695:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 696:Generated_Source\PSoC5/RTC_INT.c ****                             {
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 22


 697:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust Min */
 698:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min -= (RTC_HOUR_ELAPSED + 1u);
 699:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour++;
 700:Generated_Source\PSoC5/RTC_INT.c ****                             }
 701:Generated_Source\PSoC5/RTC_INT.c **** 
 702:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour += RTC_dstOffsetMin /
 703:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 704:Generated_Source\PSoC5/RTC_INT.c **** 
 705:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 706:Generated_Source\PSoC5/RTC_INT.c ****                             {
 707:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust hour, add day */
 708:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour -= (RTC_DAY_ELAPSED + 1u);
 709:Generated_Source\PSoC5/RTC_INT.c **** 
 710:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 711:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 712:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 713:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 714:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 715:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 716:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 717:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 718:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 719:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 720:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 721:Generated_Source\PSoC5/RTC_INT.c **** 
 722:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth++;
 723:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear++;
 724:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek++;
 725:Generated_Source\PSoC5/RTC_INT.c **** 
 726:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 727:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 728:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = 1u;
 729:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 730:Generated_Source\PSoC5/RTC_INT.c **** 
 731:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Day of month roll over.
 732:Generated_Source\PSoC5/RTC_INT.c ****                                 * Check if day of month greater than 29 in February of leap year or
 733:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than 28 NOT in February of NON leap year 
 734:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than it should be in every month in non l
 735:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 736:Generated_Source\PSoC5/RTC_INT.c ****                                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 737:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 738:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 739:Generated_Source\PSoC5/RTC_INT.c ****                                   (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 740:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 741:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month != RTC_FEBRUARY)  &&
 742:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 743:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 744:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY)) &&
 745:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 746:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 747:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 748:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month++;
 749:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfMonth = 1u;
 750:Generated_Source\PSoC5/RTC_INT.c ****                                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 751:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 752:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_JANUARY;
 753:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year++;
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 23


 754:Generated_Source\PSoC5/RTC_INT.c **** 
 755:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 756:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 757:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 758:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 759:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 760:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 761:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 762:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 763:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 764:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfYear = 1u;
 765:Generated_Source\PSoC5/RTC_INT.c **** 
 766:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 767:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 768:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 769:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 770:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 771:Generated_Source\PSoC5/RTC_INT.c ****                             }
 772:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_DST;
 773:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus = 0u;
 774:Generated_Source\PSoC5/RTC_INT.c **** 
 775:Generated_Source\PSoC5/RTC_INT.c ****                             /* Month */
 776:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 777:Generated_Source\PSoC5/RTC_INT.c ****                             {
 778:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_MONTH;
 779:Generated_Source\PSoC5/RTC_INT.c ****                             }
 780:Generated_Source\PSoC5/RTC_INT.c ****                             else
 781:Generated_Source\PSoC5/RTC_INT.c ****                             {
 782:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 783:Generated_Source\PSoC5/RTC_INT.c ****                             }
 784:Generated_Source\PSoC5/RTC_INT.c **** 
 785:Generated_Source\PSoC5/RTC_INT.c ****                             /* DayOfMonth */
 786:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.DayOfMonth ==
 787:Generated_Source\PSoC5/RTC_INT.c ****                                                                             RTC_currentTimeDate.Day
 788:Generated_Source\PSoC5/RTC_INT.c ****                             {
 789:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 790:Generated_Source\PSoC5/RTC_INT.c ****                             }
 791:Generated_Source\PSoC5/RTC_INT.c ****                             else
 792:Generated_Source\PSoC5/RTC_INT.c ****                             {
 793:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 794:Generated_Source\PSoC5/RTC_INT.c ****                             }
 795:Generated_Source\PSoC5/RTC_INT.c ****                         }
 796:Generated_Source\PSoC5/RTC_INT.c ****                     }
 797:Generated_Source\PSoC5/RTC_INT.c **** 
 798:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFWEEK */
 799:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 800:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFWEEK_MASK))
 801:Generated_Source\PSoC5/RTC_INT.c ****                     {
 802:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 803:Generated_Source\PSoC5/RTC_INT.c ****                         {
 804:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 805:Generated_Source\PSoC5/RTC_INT.c ****                         }
 806:Generated_Source\PSoC5/RTC_INT.c ****                         else
 807:Generated_Source\PSoC5/RTC_INT.c ****                         {
 808:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 809:Generated_Source\PSoC5/RTC_INT.c ****                         }
 810:Generated_Source\PSoC5/RTC_INT.c ****                     }
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 24


 811:Generated_Source\PSoC5/RTC_INT.c **** 
 812:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFYEAR */
 813:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 814:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFYEAR_MASK))
 815:Generated_Source\PSoC5/RTC_INT.c ****                     {
 816:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 817:Generated_Source\PSoC5/RTC_INT.c ****                         {
 818:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 819:Generated_Source\PSoC5/RTC_INT.c ****                         }
 820:Generated_Source\PSoC5/RTC_INT.c ****                         else
 821:Generated_Source\PSoC5/RTC_INT.c ****                         {
 822:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 823:Generated_Source\PSoC5/RTC_INT.c ****                         }
 824:Generated_Source\PSoC5/RTC_INT.c ****                     }
 825:Generated_Source\PSoC5/RTC_INT.c **** 
 826:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFMONTH */
 827:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 828:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFMONTH_MASK))
 829:Generated_Source\PSoC5/RTC_INT.c ****                     {
 830:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 831:Generated_Source\PSoC5/RTC_INT.c ****                         {
 832:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 833:Generated_Source\PSoC5/RTC_INT.c ****                         }
 834:Generated_Source\PSoC5/RTC_INT.c ****                         else
 835:Generated_Source\PSoC5/RTC_INT.c ****                         {
 836:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 837:Generated_Source\PSoC5/RTC_INT.c ****                         }
 838:Generated_Source\PSoC5/RTC_INT.c ****                     }
 839:Generated_Source\PSoC5/RTC_INT.c **** 
 840:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 841:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 842:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 843:Generated_Source\PSoC5/RTC_INT.c ****                     {
 844:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 845:Generated_Source\PSoC5/RTC_INT.c ****                         {
 846:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 847:Generated_Source\PSoC5/RTC_INT.c ****                         }
 848:Generated_Source\PSoC5/RTC_INT.c ****                         else
 849:Generated_Source\PSoC5/RTC_INT.c ****                         {
 850:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 851:Generated_Source\PSoC5/RTC_INT.c ****                         }
 852:Generated_Source\PSoC5/RTC_INT.c ****                     }
 853:Generated_Source\PSoC5/RTC_INT.c **** 
 854:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm YEAR */
 855:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 856:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_YEAR_MASK))
 857:Generated_Source\PSoC5/RTC_INT.c ****                     {
 858:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 859:Generated_Source\PSoC5/RTC_INT.c ****                         {
 860:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 861:Generated_Source\PSoC5/RTC_INT.c ****                         }
 862:Generated_Source\PSoC5/RTC_INT.c ****                         else
 863:Generated_Source\PSoC5/RTC_INT.c ****                         {
 864:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 865:Generated_Source\PSoC5/RTC_INT.c ****                         }
 866:Generated_Source\PSoC5/RTC_INT.c ****                     }
 867:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 25


 868:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 869:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 870:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 871:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 872:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 873:Generated_Source\PSoC5/RTC_INT.c ****                 }
 874:Generated_Source\PSoC5/RTC_INT.c ****             #endif /* 1u == RTC_DST_FUNC_ENABLE */
 875:Generated_Source\PSoC5/RTC_INT.c **** 
 876:Generated_Source\PSoC5/RTC_INT.c ****             /* Alarm HOUR */
 877:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_HOUR_MASK))
 495              		.loc 1 877 0
 496 0310 434B     		ldr	r3, .L41+4
 497 0312 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 498 0314 13F0040F 		tst	r3, #4
 499 0318 12D0     		beq	.L29
 878:Generated_Source\PSoC5/RTC_INT.c ****             {
 879:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_alarmCfgTimeDate.Hour == RTC_currentTimeDate.Hour)
 500              		.loc 1 879 0
 501 031a 424B     		ldr	r3, .L41+8
 502 031c 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 503 031e D2B2     		uxtb	r2, r2
 504 0320 414B     		ldr	r3, .L41+12
 505 0322 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 506 0324 DBB2     		uxtb	r3, r3
 507 0326 9A42     		cmp	r2, r3
 508 0328 05D1     		bne	.L30
 880:Generated_Source\PSoC5/RTC_INT.c ****                 {
 881:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus |= RTC_ALARM_HOUR_MASK;
 509              		.loc 1 881 0
 510 032a 3C4A     		ldr	r2, .L41
 511 032c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 512 032e 43F00403 		orr	r3, r3, #4
 513 0332 1370     		strb	r3, [r2]
 514 0334 04E0     		b	.L29
 515              	.L30:
 882:Generated_Source\PSoC5/RTC_INT.c ****                 }
 883:Generated_Source\PSoC5/RTC_INT.c ****                 else
 884:Generated_Source\PSoC5/RTC_INT.c ****                 {
 885:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_HOUR_MASK);
 516              		.loc 1 885 0
 517 0336 394A     		ldr	r2, .L41
 518 0338 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 519 033a 03F0FB03 		and	r3, r3, #251
 520 033e 1370     		strb	r3, [r2]
 521              	.L29:
 886:Generated_Source\PSoC5/RTC_INT.c ****                 }
 887:Generated_Source\PSoC5/RTC_INT.c ****             }
 888:Generated_Source\PSoC5/RTC_INT.c **** 
 889:Generated_Source\PSoC5/RTC_INT.c ****             /* Set Alarm flag event */
 890:Generated_Source\PSoC5/RTC_INT.c ****             RTC_tmp = RTC_alarmCfgMask;
 522              		.loc 1 890 0
 523 0340 374B     		ldr	r3, .L41+4
 524 0342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 525              	.LVL7:
 891:Generated_Source\PSoC5/RTC_INT.c ****             RTC_SET_ALARM(RTC_tmp,
 526              		.loc 1 891 0
 527 0344 03F0FF02 		and	r2, r3, #255
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 26


 528 0348 63B1     		cbz	r3, .L31
 529              		.loc 1 891 0 is_stmt 0 discriminator 1
 530 034a 344B     		ldr	r3, .L41
 531              	.LVL8:
 532 034c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 533 034e 32EA0303 		bics	r3, r2, r3
 534 0352 07D1     		bne	.L31
 535              		.loc 1 891 0 discriminator 2
 536 0354 354A     		ldr	r2, .L41+16
 537 0356 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 538 0358 43F00803 		orr	r3, r3, #8
 539 035c 1370     		strb	r3, [r2]
 540 035e 0022     		movs	r2, #0
 541 0360 2E4B     		ldr	r3, .L41
 542 0362 1A70     		strb	r2, [r3]
 543              	.L31:
 892:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_alarmCurStatus,
 893:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_statusDateTime);
 894:Generated_Source\PSoC5/RTC_INT.c **** 
 895:Generated_Source\PSoC5/RTC_INT.c ****             /* Every Hour */
 896:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_HOUR_MASK))
 544              		.loc 1 896 0 is_stmt 1
 545 0364 324B     		ldr	r3, .L41+20
 546 0366 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 547              	.L3:
 897:Generated_Source\PSoC5/RTC_INT.c ****             {
 898:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_EveryHourHandler();
 899:Generated_Source\PSoC5/RTC_INT.c ****             }
 900:Generated_Source\PSoC5/RTC_INT.c ****         } /* Min > 59 = Hour */
 901:Generated_Source\PSoC5/RTC_INT.c **** 
 902:Generated_Source\PSoC5/RTC_INT.c ****         /* Alarm MIN */
 903:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_MIN_MASK))
 548              		.loc 1 903 0
 549 0368 2D4B     		ldr	r3, .L41+4
 550 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 551 036c 13F0020F 		tst	r3, #2
 552 0370 12D0     		beq	.L32
 904:Generated_Source\PSoC5/RTC_INT.c ****         {
 905:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_alarmCfgTimeDate.Min == RTC_currentTimeDate.Min)
 553              		.loc 1 905 0
 554 0372 2C4B     		ldr	r3, .L41+8
 555 0374 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 556 0376 D2B2     		uxtb	r2, r2
 557 0378 2B4B     		ldr	r3, .L41+12
 558 037a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 559 037c DBB2     		uxtb	r3, r3
 560 037e 9A42     		cmp	r2, r3
 561 0380 05D1     		bne	.L33
 906:Generated_Source\PSoC5/RTC_INT.c ****             {
 907:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus |= RTC_ALARM_MIN_MASK;
 562              		.loc 1 907 0
 563 0382 264A     		ldr	r2, .L41
 564 0384 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 565 0386 43F00203 		orr	r3, r3, #2
 566 038a 1370     		strb	r3, [r2]
 567 038c 04E0     		b	.L32
 568              	.L33:
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 27


 908:Generated_Source\PSoC5/RTC_INT.c ****             }
 909:Generated_Source\PSoC5/RTC_INT.c ****             else
 910:Generated_Source\PSoC5/RTC_INT.c ****             {
 911:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MIN_MASK);
 569              		.loc 1 911 0
 570 038e 234A     		ldr	r2, .L41
 571 0390 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 572 0392 03F0FD03 		and	r3, r3, #253
 573 0396 1370     		strb	r3, [r2]
 574              	.L32:
 912:Generated_Source\PSoC5/RTC_INT.c ****             }
 913:Generated_Source\PSoC5/RTC_INT.c ****         }
 914:Generated_Source\PSoC5/RTC_INT.c **** 
 915:Generated_Source\PSoC5/RTC_INT.c ****         /* Set Alarm flag event */
 916:Generated_Source\PSoC5/RTC_INT.c ****         RTC_tmp = RTC_alarmCfgMask;
 575              		.loc 1 916 0
 576 0398 214B     		ldr	r3, .L41+4
 577 039a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 578              	.LVL9:
 917:Generated_Source\PSoC5/RTC_INT.c ****         RTC_SET_ALARM(RTC_tmp,
 579              		.loc 1 917 0
 580 039c 03F0FF02 		and	r2, r3, #255
 581 03a0 63B1     		cbz	r3, .L34
 582              		.loc 1 917 0 is_stmt 0 discriminator 1
 583 03a2 1E4B     		ldr	r3, .L41
 584              	.LVL10:
 585 03a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 586 03a6 32EA0303 		bics	r3, r2, r3
 587 03aa 07D1     		bne	.L34
 588              		.loc 1 917 0 discriminator 2
 589 03ac 1F4A     		ldr	r2, .L41+16
 590 03ae 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 591 03b0 43F00803 		orr	r3, r3, #8
 592 03b4 1370     		strb	r3, [r2]
 593 03b6 0022     		movs	r2, #0
 594 03b8 184B     		ldr	r3, .L41
 595 03ba 1A70     		strb	r2, [r3]
 596              	.L34:
 918:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_alarmCurStatus,
 919:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_statusDateTime);
 920:Generated_Source\PSoC5/RTC_INT.c **** 
 921:Generated_Source\PSoC5/RTC_INT.c ****         /* Every Min */
 922:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_MIN_MASK))
 597              		.loc 1 922 0 is_stmt 1
 598 03bc 1C4B     		ldr	r3, .L41+20
 599 03be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 600              	.L2:
 923:Generated_Source\PSoC5/RTC_INT.c ****         {
 924:Generated_Source\PSoC5/RTC_INT.c ****             RTC_EveryMinuteHandler();
 925:Generated_Source\PSoC5/RTC_INT.c ****         }
 926:Generated_Source\PSoC5/RTC_INT.c ****     } /* Sec */
 927:Generated_Source\PSoC5/RTC_INT.c **** 
 928:Generated_Source\PSoC5/RTC_INT.c ****     /* Alarm SEC */
 929:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_SEC_MASK))
 601              		.loc 1 929 0
 602 03c0 174B     		ldr	r3, .L41+4
 603 03c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 28


 604 03c4 13F0010F 		tst	r3, #1
 605 03c8 12D0     		beq	.L35
 930:Generated_Source\PSoC5/RTC_INT.c ****     {
 931:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_alarmCfgTimeDate.Sec == RTC_currentTimeDate.Sec)
 606              		.loc 1 931 0
 607 03ca 164B     		ldr	r3, .L41+8
 608 03cc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 609 03ce D2B2     		uxtb	r2, r2
 610 03d0 154B     		ldr	r3, .L41+12
 611 03d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 612 03d4 DBB2     		uxtb	r3, r3
 613 03d6 9A42     		cmp	r2, r3
 614 03d8 05D1     		bne	.L36
 932:Generated_Source\PSoC5/RTC_INT.c ****         {
 933:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus |= RTC_ALARM_SEC_MASK;
 615              		.loc 1 933 0
 616 03da 104A     		ldr	r2, .L41
 617 03dc 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 618 03de 43F00103 		orr	r3, r3, #1
 619 03e2 1370     		strb	r3, [r2]
 620 03e4 04E0     		b	.L35
 621              	.L36:
 934:Generated_Source\PSoC5/RTC_INT.c ****         }
 935:Generated_Source\PSoC5/RTC_INT.c ****         else
 936:Generated_Source\PSoC5/RTC_INT.c ****         {
 937:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_SEC_MASK);
 622              		.loc 1 937 0
 623 03e6 0D4A     		ldr	r2, .L41
 624 03e8 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 625 03ea 03F0FE03 		and	r3, r3, #254
 626 03ee 1370     		strb	r3, [r2]
 627              	.L35:
 938:Generated_Source\PSoC5/RTC_INT.c ****         }
 939:Generated_Source\PSoC5/RTC_INT.c ****     }
 940:Generated_Source\PSoC5/RTC_INT.c **** 
 941:Generated_Source\PSoC5/RTC_INT.c ****     /* Set Alarm flag event */
 942:Generated_Source\PSoC5/RTC_INT.c ****     RTC_tmp = RTC_alarmCfgMask;
 628              		.loc 1 942 0
 629 03f0 0B4B     		ldr	r3, .L41+4
 630 03f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 631              	.LVL11:
 943:Generated_Source\PSoC5/RTC_INT.c ****     RTC_SET_ALARM(RTC_tmp, RTC_alarmCurStatus, RTC_statusDateTime);
 632              		.loc 1 943 0
 633 03f4 03F0FF02 		and	r2, r3, #255
 634 03f8 63B1     		cbz	r3, .L37
 635              		.loc 1 943 0 is_stmt 0 discriminator 1
 636 03fa 084B     		ldr	r3, .L41
 637              	.LVL12:
 638 03fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 639 03fe 32EA0303 		bics	r3, r2, r3
 640 0402 07D1     		bne	.L37
 641              		.loc 1 943 0 discriminator 2
 642 0404 094A     		ldr	r2, .L41+16
 643 0406 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 644 0408 43F00803 		orr	r3, r3, #8
 645 040c 1370     		strb	r3, [r2]
 646 040e 0022     		movs	r2, #0
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 29


 647 0410 024B     		ldr	r3, .L41
 648 0412 1A70     		strb	r2, [r3]
 649              	.L37:
 944:Generated_Source\PSoC5/RTC_INT.c **** 
 945:Generated_Source\PSoC5/RTC_INT.c ****     /* Execute every second handler if needed */
 946:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_SEC_MASK))
 650              		.loc 1 946 0 is_stmt 1
 651 0414 064B     		ldr	r3, .L41+20
 652 0416 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 653 0418 08BD     		pop	{r3, pc}
 654              	.L42:
 655 041a 00BF     		.align	2
 656              	.L41:
 657 041c 00000000 		.word	RTC_alarmCurStatus
 658 0420 00000000 		.word	RTC_alarmCfgMask
 659 0424 00000000 		.word	RTC_alarmCfgTimeDate
 660 0428 00000000 		.word	RTC_currentTimeDate
 661 042c 00000000 		.word	RTC_statusDateTime
 662 0430 00000000 		.word	RTC_intervalCfgMask
 663              		.cfi_endproc
 664              	.LFE7:
 665              		.size	RTC_ISR, .-RTC_ISR
 666              		.text
 667              	.Letext0:
 668              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 669              		.file 3 "Generated_Source\\PSoC5\\RTC.h"
 670              		.file 4 "Generated_Source\\PSoC5\\cyPm.h"
 671              		.section	.debug_info,"",%progbits
 672              	.Ldebug_info0:
 673 0000 D0010000 		.4byte	0x1d0
 674 0004 0400     		.2byte	0x4
 675 0006 00000000 		.4byte	.Ldebug_abbrev0
 676 000a 04       		.byte	0x4
 677 000b 01       		.uleb128 0x1
 678 000c 4D000000 		.4byte	.LASF30
 679 0010 0C       		.byte	0xc
 680 0011 4F020000 		.4byte	.LASF31
 681 0015 20010000 		.4byte	.LASF32
 682 0019 00000000 		.4byte	.Ldebug_ranges0+0
 683 001d 00000000 		.4byte	0
 684 0021 00000000 		.4byte	.Ldebug_line0
 685 0025 02       		.uleb128 0x2
 686 0026 01       		.byte	0x1
 687 0027 06       		.byte	0x6
 688 0028 34020000 		.4byte	.LASF0
 689 002c 02       		.uleb128 0x2
 690 002d 01       		.byte	0x1
 691 002e 08       		.byte	0x8
 692 002f 3F000000 		.4byte	.LASF1
 693 0033 02       		.uleb128 0x2
 694 0034 02       		.byte	0x2
 695 0035 05       		.byte	0x5
 696 0036 06020000 		.4byte	.LASF2
 697 003a 02       		.uleb128 0x2
 698 003b 02       		.byte	0x2
 699 003c 07       		.byte	0x7
 700 003d 0B000000 		.4byte	.LASF3
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 30


 701 0041 02       		.uleb128 0x2
 702 0042 04       		.byte	0x4
 703 0043 05       		.byte	0x5
 704 0044 1F020000 		.4byte	.LASF4
 705 0048 02       		.uleb128 0x2
 706 0049 04       		.byte	0x4
 707 004a 07       		.byte	0x7
 708 004b E3000000 		.4byte	.LASF5
 709 004f 02       		.uleb128 0x2
 710 0050 08       		.byte	0x8
 711 0051 05       		.byte	0x5
 712 0052 E5010000 		.4byte	.LASF6
 713 0056 02       		.uleb128 0x2
 714 0057 08       		.byte	0x8
 715 0058 07       		.byte	0x7
 716 0059 8D010000 		.4byte	.LASF7
 717 005d 03       		.uleb128 0x3
 718 005e 04       		.byte	0x4
 719 005f 05       		.byte	0x5
 720 0060 696E7400 		.ascii	"int\000"
 721 0064 02       		.uleb128 0x2
 722 0065 04       		.byte	0x4
 723 0066 07       		.byte	0x7
 724 0067 80010000 		.4byte	.LASF8
 725 006b 04       		.uleb128 0x4
 726 006c F5000000 		.4byte	.LASF9
 727 0070 02       		.byte	0x2
 728 0071 E401     		.2byte	0x1e4
 729 0073 2C000000 		.4byte	0x2c
 730 0077 04       		.uleb128 0x4
 731 0078 79010000 		.4byte	.LASF10
 732 007c 02       		.byte	0x2
 733 007d E501     		.2byte	0x1e5
 734 007f 3A000000 		.4byte	0x3a
 735 0083 02       		.uleb128 0x2
 736 0084 04       		.byte	0x4
 737 0085 04       		.byte	0x4
 738 0086 39000000 		.4byte	.LASF11
 739 008a 02       		.uleb128 0x2
 740 008b 08       		.byte	0x8
 741 008c 04       		.byte	0x4
 742 008d 72010000 		.4byte	.LASF12
 743 0091 02       		.uleb128 0x2
 744 0092 01       		.byte	0x1
 745 0093 08       		.byte	0x8
 746 0094 F3010000 		.4byte	.LASF13
 747 0098 05       		.uleb128 0x5
 748 0099 6B000000 		.4byte	0x6b
 749 009d 06       		.uleb128 0x6
 750 009e 0C       		.byte	0xc
 751 009f 03       		.byte	0x3
 752 00a0 30       		.byte	0x30
 753 00a1 06010000 		.4byte	0x106
 754 00a5 07       		.uleb128 0x7
 755 00a6 53656300 		.ascii	"Sec\000"
 756 00aa 03       		.byte	0x3
 757 00ab 32       		.byte	0x32
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 31


 758 00ac 6B000000 		.4byte	0x6b
 759 00b0 00       		.byte	0
 760 00b1 07       		.uleb128 0x7
 761 00b2 4D696E00 		.ascii	"Min\000"
 762 00b6 03       		.byte	0x3
 763 00b7 33       		.byte	0x33
 764 00b8 6B000000 		.4byte	0x6b
 765 00bc 01       		.byte	0x1
 766 00bd 08       		.uleb128 0x8
 767 00be 10020000 		.4byte	.LASF14
 768 00c2 03       		.byte	0x3
 769 00c3 34       		.byte	0x34
 770 00c4 6B000000 		.4byte	0x6b
 771 00c8 02       		.byte	0x2
 772 00c9 08       		.uleb128 0x8
 773 00ca 15020000 		.4byte	.LASF15
 774 00ce 03       		.byte	0x3
 775 00cf 35       		.byte	0x35
 776 00d0 6B000000 		.4byte	0x6b
 777 00d4 03       		.byte	0x3
 778 00d5 08       		.uleb128 0x8
 779 00d6 00000000 		.4byte	.LASF16
 780 00da 03       		.byte	0x3
 781 00db 36       		.byte	0x36
 782 00dc 6B000000 		.4byte	0x6b
 783 00e0 04       		.byte	0x4
 784 00e1 08       		.uleb128 0x8
 785 00e2 FB000000 		.4byte	.LASF17
 786 00e6 03       		.byte	0x3
 787 00e7 37       		.byte	0x37
 788 00e8 77000000 		.4byte	0x77
 789 00ec 06       		.byte	0x6
 790 00ed 08       		.uleb128 0x8
 791 00ee 05010000 		.4byte	.LASF18
 792 00f2 03       		.byte	0x3
 793 00f3 38       		.byte	0x38
 794 00f4 6B000000 		.4byte	0x6b
 795 00f8 08       		.byte	0x8
 796 00f9 08       		.uleb128 0x8
 797 00fa 5C010000 		.4byte	.LASF19
 798 00fe 03       		.byte	0x3
 799 00ff 39       		.byte	0x39
 800 0100 77000000 		.4byte	0x77
 801 0104 0A       		.byte	0xa
 802 0105 00       		.byte	0
 803 0106 09       		.uleb128 0x9
 804 0107 F8010000 		.4byte	.LASF20
 805 010b 03       		.byte	0x3
 806 010c 3A       		.byte	0x3a
 807 010d 11010000 		.4byte	0x111
 808 0111 05       		.uleb128 0x5
 809 0112 9D000000 		.4byte	0x9d
 810 0116 02       		.uleb128 0x2
 811 0117 08       		.byte	0x8
 812 0118 04       		.byte	0x4
 813 0119 28020000 		.4byte	.LASF21
 814 011d 02       		.uleb128 0x2
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 32


 815 011e 04       		.byte	0x4
 816 011f 07       		.byte	0x7
 817 0120 CB010000 		.4byte	.LASF22
 818 0124 0A       		.uleb128 0xa
 819 0125 DB000000 		.4byte	.LASF33
 820 0129 01       		.byte	0x1
 821 012a 0901     		.2byte	0x109
 822 012c 00000000 		.4byte	.LFB7
 823 0130 34040000 		.4byte	.LFE7-.LFB7
 824 0134 01       		.uleb128 0x1
 825 0135 9C       		.byte	0x9c
 826 0136 5A010000 		.4byte	0x15a
 827 013a 0B       		.uleb128 0xb
 828 013b 1E000000 		.4byte	.LASF34
 829 013f 01       		.byte	0x1
 830 0140 0B01     		.2byte	0x10b
 831 0142 6B000000 		.4byte	0x6b
 832 0146 00000000 		.4byte	.LLST0
 833 014a 0C       		.uleb128 0xc
 834 014b 08000000 		.4byte	.LVL0
 835 014f C8010000 		.4byte	0x1c8
 836 0153 0D       		.uleb128 0xd
 837 0154 01       		.uleb128 0x1
 838 0155 50       		.byte	0x50
 839 0156 01       		.uleb128 0x1
 840 0157 34       		.byte	0x34
 841 0158 00       		.byte	0
 842 0159 00       		.byte	0
 843 015a 0E       		.uleb128 0xe
 844 015b 0B010000 		.4byte	.LASF23
 845 015f 03       		.byte	0x3
 846 0160 2D01     		.2byte	0x12d
 847 0162 06010000 		.4byte	0x106
 848 0166 0E       		.uleb128 0xe
 849 0167 B7010000 		.4byte	.LASF24
 850 016b 03       		.byte	0x3
 851 016c 2E01     		.2byte	0x12e
 852 016e 06010000 		.4byte	0x106
 853 0172 0E       		.uleb128 0xe
 854 0173 61010000 		.4byte	.LASF25
 855 0177 03       		.byte	0x3
 856 0178 3901     		.2byte	0x139
 857 017a 98000000 		.4byte	0x98
 858 017e 0E       		.uleb128 0xe
 859 017f A4010000 		.4byte	.LASF26
 860 0183 03       		.byte	0x3
 861 0184 3A01     		.2byte	0x13a
 862 0186 98000000 		.4byte	0x98
 863 018a 0E       		.uleb128 0xe
 864 018b 70020000 		.4byte	.LASF27
 865 018f 03       		.byte	0x3
 866 0190 3B01     		.2byte	0x13b
 867 0192 98000000 		.4byte	0x98
 868 0196 0E       		.uleb128 0xe
 869 0197 26000000 		.4byte	.LASF28
 870 019b 03       		.byte	0x3
 871 019c 3C01     		.2byte	0x13c
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 33


 872 019e 98000000 		.4byte	0x98
 873 01a2 0F       		.uleb128 0xf
 874 01a3 B2010000 		.4byte	0x1b2
 875 01a7 B2010000 		.4byte	0x1b2
 876 01ab 10       		.uleb128 0x10
 877 01ac 1D010000 		.4byte	0x11d
 878 01b0 0B       		.byte	0xb
 879 01b1 00       		.byte	0
 880 01b2 11       		.uleb128 0x11
 881 01b3 6B000000 		.4byte	0x6b
 882 01b7 0E       		.uleb128 0xe
 883 01b8 D4010000 		.4byte	.LASF29
 884 01bc 03       		.byte	0x3
 885 01bd 3E01     		.2byte	0x13e
 886 01bf C3010000 		.4byte	0x1c3
 887 01c3 11       		.uleb128 0x11
 888 01c4 A2010000 		.4byte	0x1a2
 889 01c8 12       		.uleb128 0x12
 890 01c9 40020000 		.4byte	.LASF35
 891 01cd 40020000 		.4byte	.LASF35
 892 01d1 04       		.byte	0x4
 893 01d2 26       		.byte	0x26
 894 01d3 00       		.byte	0
 895              		.section	.debug_abbrev,"",%progbits
 896              	.Ldebug_abbrev0:
 897 0000 01       		.uleb128 0x1
 898 0001 11       		.uleb128 0x11
 899 0002 01       		.byte	0x1
 900 0003 25       		.uleb128 0x25
 901 0004 0E       		.uleb128 0xe
 902 0005 13       		.uleb128 0x13
 903 0006 0B       		.uleb128 0xb
 904 0007 03       		.uleb128 0x3
 905 0008 0E       		.uleb128 0xe
 906 0009 1B       		.uleb128 0x1b
 907 000a 0E       		.uleb128 0xe
 908 000b 55       		.uleb128 0x55
 909 000c 17       		.uleb128 0x17
 910 000d 11       		.uleb128 0x11
 911 000e 01       		.uleb128 0x1
 912 000f 10       		.uleb128 0x10
 913 0010 17       		.uleb128 0x17
 914 0011 00       		.byte	0
 915 0012 00       		.byte	0
 916 0013 02       		.uleb128 0x2
 917 0014 24       		.uleb128 0x24
 918 0015 00       		.byte	0
 919 0016 0B       		.uleb128 0xb
 920 0017 0B       		.uleb128 0xb
 921 0018 3E       		.uleb128 0x3e
 922 0019 0B       		.uleb128 0xb
 923 001a 03       		.uleb128 0x3
 924 001b 0E       		.uleb128 0xe
 925 001c 00       		.byte	0
 926 001d 00       		.byte	0
 927 001e 03       		.uleb128 0x3
 928 001f 24       		.uleb128 0x24
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 34


 929 0020 00       		.byte	0
 930 0021 0B       		.uleb128 0xb
 931 0022 0B       		.uleb128 0xb
 932 0023 3E       		.uleb128 0x3e
 933 0024 0B       		.uleb128 0xb
 934 0025 03       		.uleb128 0x3
 935 0026 08       		.uleb128 0x8
 936 0027 00       		.byte	0
 937 0028 00       		.byte	0
 938 0029 04       		.uleb128 0x4
 939 002a 16       		.uleb128 0x16
 940 002b 00       		.byte	0
 941 002c 03       		.uleb128 0x3
 942 002d 0E       		.uleb128 0xe
 943 002e 3A       		.uleb128 0x3a
 944 002f 0B       		.uleb128 0xb
 945 0030 3B       		.uleb128 0x3b
 946 0031 05       		.uleb128 0x5
 947 0032 49       		.uleb128 0x49
 948 0033 13       		.uleb128 0x13
 949 0034 00       		.byte	0
 950 0035 00       		.byte	0
 951 0036 05       		.uleb128 0x5
 952 0037 35       		.uleb128 0x35
 953 0038 00       		.byte	0
 954 0039 49       		.uleb128 0x49
 955 003a 13       		.uleb128 0x13
 956 003b 00       		.byte	0
 957 003c 00       		.byte	0
 958 003d 06       		.uleb128 0x6
 959 003e 13       		.uleb128 0x13
 960 003f 01       		.byte	0x1
 961 0040 0B       		.uleb128 0xb
 962 0041 0B       		.uleb128 0xb
 963 0042 3A       		.uleb128 0x3a
 964 0043 0B       		.uleb128 0xb
 965 0044 3B       		.uleb128 0x3b
 966 0045 0B       		.uleb128 0xb
 967 0046 01       		.uleb128 0x1
 968 0047 13       		.uleb128 0x13
 969 0048 00       		.byte	0
 970 0049 00       		.byte	0
 971 004a 07       		.uleb128 0x7
 972 004b 0D       		.uleb128 0xd
 973 004c 00       		.byte	0
 974 004d 03       		.uleb128 0x3
 975 004e 08       		.uleb128 0x8
 976 004f 3A       		.uleb128 0x3a
 977 0050 0B       		.uleb128 0xb
 978 0051 3B       		.uleb128 0x3b
 979 0052 0B       		.uleb128 0xb
 980 0053 49       		.uleb128 0x49
 981 0054 13       		.uleb128 0x13
 982 0055 38       		.uleb128 0x38
 983 0056 0B       		.uleb128 0xb
 984 0057 00       		.byte	0
 985 0058 00       		.byte	0
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 35


 986 0059 08       		.uleb128 0x8
 987 005a 0D       		.uleb128 0xd
 988 005b 00       		.byte	0
 989 005c 03       		.uleb128 0x3
 990 005d 0E       		.uleb128 0xe
 991 005e 3A       		.uleb128 0x3a
 992 005f 0B       		.uleb128 0xb
 993 0060 3B       		.uleb128 0x3b
 994 0061 0B       		.uleb128 0xb
 995 0062 49       		.uleb128 0x49
 996 0063 13       		.uleb128 0x13
 997 0064 38       		.uleb128 0x38
 998 0065 0B       		.uleb128 0xb
 999 0066 00       		.byte	0
 1000 0067 00       		.byte	0
 1001 0068 09       		.uleb128 0x9
 1002 0069 16       		.uleb128 0x16
 1003 006a 00       		.byte	0
 1004 006b 03       		.uleb128 0x3
 1005 006c 0E       		.uleb128 0xe
 1006 006d 3A       		.uleb128 0x3a
 1007 006e 0B       		.uleb128 0xb
 1008 006f 3B       		.uleb128 0x3b
 1009 0070 0B       		.uleb128 0xb
 1010 0071 49       		.uleb128 0x49
 1011 0072 13       		.uleb128 0x13
 1012 0073 00       		.byte	0
 1013 0074 00       		.byte	0
 1014 0075 0A       		.uleb128 0xa
 1015 0076 2E       		.uleb128 0x2e
 1016 0077 01       		.byte	0x1
 1017 0078 3F       		.uleb128 0x3f
 1018 0079 19       		.uleb128 0x19
 1019 007a 03       		.uleb128 0x3
 1020 007b 0E       		.uleb128 0xe
 1021 007c 3A       		.uleb128 0x3a
 1022 007d 0B       		.uleb128 0xb
 1023 007e 3B       		.uleb128 0x3b
 1024 007f 05       		.uleb128 0x5
 1025 0080 27       		.uleb128 0x27
 1026 0081 19       		.uleb128 0x19
 1027 0082 11       		.uleb128 0x11
 1028 0083 01       		.uleb128 0x1
 1029 0084 12       		.uleb128 0x12
 1030 0085 06       		.uleb128 0x6
 1031 0086 40       		.uleb128 0x40
 1032 0087 18       		.uleb128 0x18
 1033 0088 9742     		.uleb128 0x2117
 1034 008a 19       		.uleb128 0x19
 1035 008b 01       		.uleb128 0x1
 1036 008c 13       		.uleb128 0x13
 1037 008d 00       		.byte	0
 1038 008e 00       		.byte	0
 1039 008f 0B       		.uleb128 0xb
 1040 0090 34       		.uleb128 0x34
 1041 0091 00       		.byte	0
 1042 0092 03       		.uleb128 0x3
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 36


 1043 0093 0E       		.uleb128 0xe
 1044 0094 3A       		.uleb128 0x3a
 1045 0095 0B       		.uleb128 0xb
 1046 0096 3B       		.uleb128 0x3b
 1047 0097 05       		.uleb128 0x5
 1048 0098 49       		.uleb128 0x49
 1049 0099 13       		.uleb128 0x13
 1050 009a 02       		.uleb128 0x2
 1051 009b 17       		.uleb128 0x17
 1052 009c 00       		.byte	0
 1053 009d 00       		.byte	0
 1054 009e 0C       		.uleb128 0xc
 1055 009f 898201   		.uleb128 0x4109
 1056 00a2 01       		.byte	0x1
 1057 00a3 11       		.uleb128 0x11
 1058 00a4 01       		.uleb128 0x1
 1059 00a5 31       		.uleb128 0x31
 1060 00a6 13       		.uleb128 0x13
 1061 00a7 00       		.byte	0
 1062 00a8 00       		.byte	0
 1063 00a9 0D       		.uleb128 0xd
 1064 00aa 8A8201   		.uleb128 0x410a
 1065 00ad 00       		.byte	0
 1066 00ae 02       		.uleb128 0x2
 1067 00af 18       		.uleb128 0x18
 1068 00b0 9142     		.uleb128 0x2111
 1069 00b2 18       		.uleb128 0x18
 1070 00b3 00       		.byte	0
 1071 00b4 00       		.byte	0
 1072 00b5 0E       		.uleb128 0xe
 1073 00b6 34       		.uleb128 0x34
 1074 00b7 00       		.byte	0
 1075 00b8 03       		.uleb128 0x3
 1076 00b9 0E       		.uleb128 0xe
 1077 00ba 3A       		.uleb128 0x3a
 1078 00bb 0B       		.uleb128 0xb
 1079 00bc 3B       		.uleb128 0x3b
 1080 00bd 05       		.uleb128 0x5
 1081 00be 49       		.uleb128 0x49
 1082 00bf 13       		.uleb128 0x13
 1083 00c0 3F       		.uleb128 0x3f
 1084 00c1 19       		.uleb128 0x19
 1085 00c2 3C       		.uleb128 0x3c
 1086 00c3 19       		.uleb128 0x19
 1087 00c4 00       		.byte	0
 1088 00c5 00       		.byte	0
 1089 00c6 0F       		.uleb128 0xf
 1090 00c7 01       		.uleb128 0x1
 1091 00c8 01       		.byte	0x1
 1092 00c9 49       		.uleb128 0x49
 1093 00ca 13       		.uleb128 0x13
 1094 00cb 01       		.uleb128 0x1
 1095 00cc 13       		.uleb128 0x13
 1096 00cd 00       		.byte	0
 1097 00ce 00       		.byte	0
 1098 00cf 10       		.uleb128 0x10
 1099 00d0 21       		.uleb128 0x21
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 37


 1100 00d1 00       		.byte	0
 1101 00d2 49       		.uleb128 0x49
 1102 00d3 13       		.uleb128 0x13
 1103 00d4 2F       		.uleb128 0x2f
 1104 00d5 0B       		.uleb128 0xb
 1105 00d6 00       		.byte	0
 1106 00d7 00       		.byte	0
 1107 00d8 11       		.uleb128 0x11
 1108 00d9 26       		.uleb128 0x26
 1109 00da 00       		.byte	0
 1110 00db 49       		.uleb128 0x49
 1111 00dc 13       		.uleb128 0x13
 1112 00dd 00       		.byte	0
 1113 00de 00       		.byte	0
 1114 00df 12       		.uleb128 0x12
 1115 00e0 2E       		.uleb128 0x2e
 1116 00e1 00       		.byte	0
 1117 00e2 3F       		.uleb128 0x3f
 1118 00e3 19       		.uleb128 0x19
 1119 00e4 3C       		.uleb128 0x3c
 1120 00e5 19       		.uleb128 0x19
 1121 00e6 6E       		.uleb128 0x6e
 1122 00e7 0E       		.uleb128 0xe
 1123 00e8 03       		.uleb128 0x3
 1124 00e9 0E       		.uleb128 0xe
 1125 00ea 3A       		.uleb128 0x3a
 1126 00eb 0B       		.uleb128 0xb
 1127 00ec 3B       		.uleb128 0x3b
 1128 00ed 0B       		.uleb128 0xb
 1129 00ee 00       		.byte	0
 1130 00ef 00       		.byte	0
 1131 00f0 00       		.byte	0
 1132              		.section	.debug_loc,"",%progbits
 1133              	.Ldebug_loc0:
 1134              	.LLST0:
 1135 0000 8E010000 		.4byte	.LVL1
 1136 0004 96010000 		.4byte	.LVL2
 1137 0008 0100     		.2byte	0x1
 1138 000a 53       		.byte	0x53
 1139 000b E6010000 		.4byte	.LVL3
 1140 000f EE010000 		.4byte	.LVL4
 1141 0013 0100     		.2byte	0x1
 1142 0015 53       		.byte	0x53
 1143 0016 BE020000 		.4byte	.LVL5
 1144 001a C6020000 		.4byte	.LVL6
 1145 001e 0100     		.2byte	0x1
 1146 0020 53       		.byte	0x53
 1147 0021 44030000 		.4byte	.LVL7
 1148 0025 4C030000 		.4byte	.LVL8
 1149 0029 0100     		.2byte	0x1
 1150 002b 53       		.byte	0x53
 1151 002c 9C030000 		.4byte	.LVL9
 1152 0030 A4030000 		.4byte	.LVL10
 1153 0034 0100     		.2byte	0x1
 1154 0036 53       		.byte	0x53
 1155 0037 F4030000 		.4byte	.LVL11
 1156 003b FC030000 		.4byte	.LVL12
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 38


 1157 003f 0100     		.2byte	0x1
 1158 0041 53       		.byte	0x53
 1159 0042 00000000 		.4byte	0
 1160 0046 00000000 		.4byte	0
 1161              		.section	.debug_aranges,"",%progbits
 1162 0000 1C000000 		.4byte	0x1c
 1163 0004 0200     		.2byte	0x2
 1164 0006 00000000 		.4byte	.Ldebug_info0
 1165 000a 04       		.byte	0x4
 1166 000b 00       		.byte	0
 1167 000c 0000     		.2byte	0
 1168 000e 0000     		.2byte	0
 1169 0010 00000000 		.4byte	.LFB7
 1170 0014 34040000 		.4byte	.LFE7-.LFB7
 1171 0018 00000000 		.4byte	0
 1172 001c 00000000 		.4byte	0
 1173              		.section	.debug_ranges,"",%progbits
 1174              	.Ldebug_ranges0:
 1175 0000 00000000 		.4byte	.LFB7
 1176 0004 34040000 		.4byte	.LFE7
 1177 0008 00000000 		.4byte	0
 1178 000c 00000000 		.4byte	0
 1179              		.section	.debug_line,"",%progbits
 1180              	.Ldebug_line0:
 1181 0000 36010000 		.section	.debug_str,"MS",%progbits,1
 1181      02005700 
 1181      00000201 
 1181      FB0E0D00 
 1181      01010101 
 1182              	.LASF16:
 1183 0000 4461794F 		.ascii	"DayOfMonth\000"
 1183      664D6F6E 
 1183      746800
 1184              	.LASF3:
 1185 000b 73686F72 		.ascii	"short unsigned int\000"
 1185      7420756E 
 1185      7369676E 
 1185      65642069 
 1185      6E7400
 1186              	.LASF34:
 1187 001e 5254435F 		.ascii	"RTC_tmp\000"
 1187      746D7000 
 1188              	.LASF28:
 1189 0026 5254435F 		.ascii	"RTC_statusDateTime\000"
 1189      73746174 
 1189      75734461 
 1189      74655469 
 1189      6D6500
 1190              	.LASF11:
 1191 0039 666C6F61 		.ascii	"float\000"
 1191      7400
 1192              	.LASF1:
 1193 003f 756E7369 		.ascii	"unsigned char\000"
 1193      676E6564 
 1193      20636861 
 1193      7200
 1194              	.LASF30:
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 39


 1195 004d 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1195      43313120 
 1195      352E342E 
 1195      31203230 
 1195      31363036 
 1196 0080 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1196      20726576 
 1196      6973696F 
 1196      6E203233 
 1196      37373135 
 1197 00b3 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1197      66756E63 
 1197      74696F6E 
 1197      2D736563 
 1197      74696F6E 
 1198              	.LASF33:
 1199 00db 5254435F 		.ascii	"RTC_ISR\000"
 1199      49535200 
 1200              	.LASF5:
 1201 00e3 6C6F6E67 		.ascii	"long unsigned int\000"
 1201      20756E73 
 1201      69676E65 
 1201      6420696E 
 1201      7400
 1202              	.LASF9:
 1203 00f5 75696E74 		.ascii	"uint8\000"
 1203      3800
 1204              	.LASF17:
 1205 00fb 4461794F 		.ascii	"DayOfYear\000"
 1205      66596561 
 1205      7200
 1206              	.LASF18:
 1207 0105 4D6F6E74 		.ascii	"Month\000"
 1207      6800
 1208              	.LASF23:
 1209 010b 5254435F 		.ascii	"RTC_alarmCfgTimeDate\000"
 1209      616C6172 
 1209      6D436667 
 1209      54696D65 
 1209      44617465 
 1210              	.LASF32:
 1211 0120 433A5C55 		.ascii	"C:\\Users\\manuelfu\\Documents\\PSoC Creator\\zumo\\"
 1211      73657273 
 1211      5C6D616E 
 1211      75656C66 
 1211      755C446F 
 1212 014e 5A756D6F 		.ascii	"ZumoBot.cydsn\000"
 1212      426F742E 
 1212      63796473 
 1212      6E00
 1213              	.LASF19:
 1214 015c 59656172 		.ascii	"Year\000"
 1214      00
 1215              	.LASF25:
 1216 0161 5254435F 		.ascii	"RTC_alarmCfgMask\000"
 1216      616C6172 
 1216      6D436667 
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 40


 1216      4D61736B 
 1216      00
 1217              	.LASF12:
 1218 0172 646F7562 		.ascii	"double\000"
 1218      6C6500
 1219              	.LASF10:
 1220 0179 75696E74 		.ascii	"uint16\000"
 1220      313600
 1221              	.LASF8:
 1222 0180 756E7369 		.ascii	"unsigned int\000"
 1222      676E6564 
 1222      20696E74 
 1222      00
 1223              	.LASF7:
 1224 018d 6C6F6E67 		.ascii	"long long unsigned int\000"
 1224      206C6F6E 
 1224      6720756E 
 1224      7369676E 
 1224      65642069 
 1225              	.LASF26:
 1226 01a4 5254435F 		.ascii	"RTC_alarmCurStatus\000"
 1226      616C6172 
 1226      6D437572 
 1226      53746174 
 1226      757300
 1227              	.LASF24:
 1228 01b7 5254435F 		.ascii	"RTC_currentTimeDate\000"
 1228      63757272 
 1228      656E7454 
 1228      696D6544 
 1228      61746500 
 1229              	.LASF22:
 1230 01cb 73697A65 		.ascii	"sizetype\000"
 1230      74797065 
 1230      00
 1231              	.LASF29:
 1232 01d4 5254435F 		.ascii	"RTC_daysInMonths\000"
 1232      64617973 
 1232      496E4D6F 
 1232      6E746873 
 1232      00
 1233              	.LASF6:
 1234 01e5 6C6F6E67 		.ascii	"long long int\000"
 1234      206C6F6E 
 1234      6720696E 
 1234      7400
 1235              	.LASF13:
 1236 01f3 63686172 		.ascii	"char\000"
 1236      00
 1237              	.LASF20:
 1238 01f8 5254435F 		.ascii	"RTC_TIME_DATE\000"
 1238      54494D45 
 1238      5F444154 
 1238      4500
 1239              	.LASF2:
 1240 0206 73686F72 		.ascii	"short int\000"
 1240      7420696E 
ARM GAS  C:\Users\manuelfu\AppData\Local\Temp\cctwnc9T.s 			page 41


 1240      7400
 1241              	.LASF14:
 1242 0210 486F7572 		.ascii	"Hour\000"
 1242      00
 1243              	.LASF15:
 1244 0215 4461794F 		.ascii	"DayOfWeek\000"
 1244      66576565 
 1244      6B00
 1245              	.LASF4:
 1246 021f 6C6F6E67 		.ascii	"long int\000"
 1246      20696E74 
 1246      00
 1247              	.LASF21:
 1248 0228 6C6F6E67 		.ascii	"long double\000"
 1248      20646F75 
 1248      626C6500 
 1249              	.LASF0:
 1250 0234 7369676E 		.ascii	"signed char\000"
 1250      65642063 
 1250      68617200 
 1251              	.LASF35:
 1252 0240 4379506D 		.ascii	"CyPmReadStatus\000"
 1252      52656164 
 1252      53746174 
 1252      757300
 1253              	.LASF31:
 1254 024f 47656E65 		.ascii	"Generated_Source\\PSoC5\\RTC_INT.c\000"
 1254      72617465 
 1254      645F536F 
 1254      75726365 
 1254      5C50536F 
 1255              	.LASF27:
 1256 0270 5254435F 		.ascii	"RTC_intervalCfgMask\000"
 1256      696E7465 
 1256      7276616C 
 1256      4366674D 
 1256      61736B00 
 1257              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
